
WaterRocketSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003924  08003924  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800392c  0800392c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08003940  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003940  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006b4f  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001432  00000000  00000000  00026bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000718  00000000  00000000  00028000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000570  00000000  00000000  00028718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016012  00000000  00000000  00028c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009216  00000000  00000000  0003ec9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007eb08  00000000  00000000  00047eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d3c  00000000  00000000  000c69b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c86f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080038e0 	.word	0x080038e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080038e0 	.word	0x080038e0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_ldivmod>:
 8000608:	b97b      	cbnz	r3, 800062a <__aeabi_ldivmod+0x22>
 800060a:	b972      	cbnz	r2, 800062a <__aeabi_ldivmod+0x22>
 800060c:	2900      	cmp	r1, #0
 800060e:	bfbe      	ittt	lt
 8000610:	2000      	movlt	r0, #0
 8000612:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000616:	e006      	blt.n	8000626 <__aeabi_ldivmod+0x1e>
 8000618:	bf08      	it	eq
 800061a:	2800      	cmpeq	r0, #0
 800061c:	bf1c      	itt	ne
 800061e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000622:	f04f 30ff 	movne.w	r0, #4294967295
 8000626:	f000 b9a5 	b.w	8000974 <__aeabi_idiv0>
 800062a:	f1ad 0c08 	sub.w	ip, sp, #8
 800062e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000632:	2900      	cmp	r1, #0
 8000634:	db09      	blt.n	800064a <__aeabi_ldivmod+0x42>
 8000636:	2b00      	cmp	r3, #0
 8000638:	db1a      	blt.n	8000670 <__aeabi_ldivmod+0x68>
 800063a:	f000 f835 	bl	80006a8 <__udivmoddi4>
 800063e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000646:	b004      	add	sp, #16
 8000648:	4770      	bx	lr
 800064a:	4240      	negs	r0, r0
 800064c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	db1b      	blt.n	800068c <__aeabi_ldivmod+0x84>
 8000654:	f000 f828 	bl	80006a8 <__udivmoddi4>
 8000658:	f8dd e004 	ldr.w	lr, [sp, #4]
 800065c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000660:	b004      	add	sp, #16
 8000662:	4240      	negs	r0, r0
 8000664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000668:	4252      	negs	r2, r2
 800066a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800066e:	4770      	bx	lr
 8000670:	4252      	negs	r2, r2
 8000672:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000676:	f000 f817 	bl	80006a8 <__udivmoddi4>
 800067a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800067e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000682:	b004      	add	sp, #16
 8000684:	4240      	negs	r0, r0
 8000686:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800068a:	4770      	bx	lr
 800068c:	4252      	negs	r2, r2
 800068e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000692:	f000 f809 	bl	80006a8 <__udivmoddi4>
 8000696:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800069e:	b004      	add	sp, #16
 80006a0:	4252      	negs	r2, r2
 80006a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006a6:	4770      	bx	lr

080006a8 <__udivmoddi4>:
 80006a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ac:	9e08      	ldr	r6, [sp, #32]
 80006ae:	460d      	mov	r5, r1
 80006b0:	4604      	mov	r4, r0
 80006b2:	468e      	mov	lr, r1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d14c      	bne.n	8000752 <__udivmoddi4+0xaa>
 80006b8:	428a      	cmp	r2, r1
 80006ba:	4694      	mov	ip, r2
 80006bc:	d967      	bls.n	800078e <__udivmoddi4+0xe6>
 80006be:	fab2 f382 	clz	r3, r2
 80006c2:	b153      	cbz	r3, 80006da <__udivmoddi4+0x32>
 80006c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006c8:	f1c3 0220 	rsb	r2, r3, #32
 80006cc:	fa01 fe03 	lsl.w	lr, r1, r3
 80006d0:	fa20 f202 	lsr.w	r2, r0, r2
 80006d4:	ea42 0e0e 	orr.w	lr, r2, lr
 80006d8:	409c      	lsls	r4, r3
 80006da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006de:	fbbe f1f7 	udiv	r1, lr, r7
 80006e2:	fa1f f58c 	uxth.w	r5, ip
 80006e6:	fb07 ee11 	mls	lr, r7, r1, lr
 80006ea:	fb01 f005 	mul.w	r0, r1, r5
 80006ee:	0c22      	lsrs	r2, r4, #16
 80006f0:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80006f4:	4290      	cmp	r0, r2
 80006f6:	d90a      	bls.n	800070e <__udivmoddi4+0x66>
 80006f8:	eb1c 0202 	adds.w	r2, ip, r2
 80006fc:	f101 3eff 	add.w	lr, r1, #4294967295
 8000700:	f080 8119 	bcs.w	8000936 <__udivmoddi4+0x28e>
 8000704:	4290      	cmp	r0, r2
 8000706:	f240 8116 	bls.w	8000936 <__udivmoddi4+0x28e>
 800070a:	3902      	subs	r1, #2
 800070c:	4462      	add	r2, ip
 800070e:	1a12      	subs	r2, r2, r0
 8000710:	fbb2 f0f7 	udiv	r0, r2, r7
 8000714:	fb07 2210 	mls	r2, r7, r0, r2
 8000718:	fb00 f505 	mul.w	r5, r0, r5
 800071c:	b2a4      	uxth	r4, r4
 800071e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000722:	42a5      	cmp	r5, r4
 8000724:	d90a      	bls.n	800073c <__udivmoddi4+0x94>
 8000726:	eb1c 0404 	adds.w	r4, ip, r4
 800072a:	f100 32ff 	add.w	r2, r0, #4294967295
 800072e:	f080 8104 	bcs.w	800093a <__udivmoddi4+0x292>
 8000732:	42a5      	cmp	r5, r4
 8000734:	f240 8101 	bls.w	800093a <__udivmoddi4+0x292>
 8000738:	4464      	add	r4, ip
 800073a:	3802      	subs	r0, #2
 800073c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000740:	2100      	movs	r1, #0
 8000742:	1b64      	subs	r4, r4, r5
 8000744:	b11e      	cbz	r6, 800074e <__udivmoddi4+0xa6>
 8000746:	40dc      	lsrs	r4, r3
 8000748:	2300      	movs	r3, #0
 800074a:	e9c6 4300 	strd	r4, r3, [r6]
 800074e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000752:	428b      	cmp	r3, r1
 8000754:	d908      	bls.n	8000768 <__udivmoddi4+0xc0>
 8000756:	2e00      	cmp	r6, #0
 8000758:	f000 80ea 	beq.w	8000930 <__udivmoddi4+0x288>
 800075c:	2100      	movs	r1, #0
 800075e:	e9c6 0500 	strd	r0, r5, [r6]
 8000762:	4608      	mov	r0, r1
 8000764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000768:	fab3 f183 	clz	r1, r3
 800076c:	2900      	cmp	r1, #0
 800076e:	d148      	bne.n	8000802 <__udivmoddi4+0x15a>
 8000770:	42ab      	cmp	r3, r5
 8000772:	d302      	bcc.n	800077a <__udivmoddi4+0xd2>
 8000774:	4282      	cmp	r2, r0
 8000776:	f200 80f8 	bhi.w	800096a <__udivmoddi4+0x2c2>
 800077a:	1a84      	subs	r4, r0, r2
 800077c:	eb65 0203 	sbc.w	r2, r5, r3
 8000780:	2001      	movs	r0, #1
 8000782:	4696      	mov	lr, r2
 8000784:	2e00      	cmp	r6, #0
 8000786:	d0e2      	beq.n	800074e <__udivmoddi4+0xa6>
 8000788:	e9c6 4e00 	strd	r4, lr, [r6]
 800078c:	e7df      	b.n	800074e <__udivmoddi4+0xa6>
 800078e:	b902      	cbnz	r2, 8000792 <__udivmoddi4+0xea>
 8000790:	deff      	udf	#255	; 0xff
 8000792:	fab2 f382 	clz	r3, r2
 8000796:	2b00      	cmp	r3, #0
 8000798:	f040 808e 	bne.w	80008b8 <__udivmoddi4+0x210>
 800079c:	1a88      	subs	r0, r1, r2
 800079e:	2101      	movs	r1, #1
 80007a0:	0c17      	lsrs	r7, r2, #16
 80007a2:	fa1f fe82 	uxth.w	lr, r2
 80007a6:	fbb0 f5f7 	udiv	r5, r0, r7
 80007aa:	fb07 0015 	mls	r0, r7, r5, r0
 80007ae:	0c22      	lsrs	r2, r4, #16
 80007b0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007b4:	fb0e f005 	mul.w	r0, lr, r5
 80007b8:	4290      	cmp	r0, r2
 80007ba:	d908      	bls.n	80007ce <__udivmoddi4+0x126>
 80007bc:	eb1c 0202 	adds.w	r2, ip, r2
 80007c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80007c4:	d202      	bcs.n	80007cc <__udivmoddi4+0x124>
 80007c6:	4290      	cmp	r0, r2
 80007c8:	f200 80cc 	bhi.w	8000964 <__udivmoddi4+0x2bc>
 80007cc:	4645      	mov	r5, r8
 80007ce:	1a12      	subs	r2, r2, r0
 80007d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80007d4:	fb07 2210 	mls	r2, r7, r0, r2
 80007d8:	fb0e fe00 	mul.w	lr, lr, r0
 80007dc:	b2a4      	uxth	r4, r4
 80007de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007e2:	45a6      	cmp	lr, r4
 80007e4:	d908      	bls.n	80007f8 <__udivmoddi4+0x150>
 80007e6:	eb1c 0404 	adds.w	r4, ip, r4
 80007ea:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ee:	d202      	bcs.n	80007f6 <__udivmoddi4+0x14e>
 80007f0:	45a6      	cmp	lr, r4
 80007f2:	f200 80b4 	bhi.w	800095e <__udivmoddi4+0x2b6>
 80007f6:	4610      	mov	r0, r2
 80007f8:	eba4 040e 	sub.w	r4, r4, lr
 80007fc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000800:	e7a0      	b.n	8000744 <__udivmoddi4+0x9c>
 8000802:	f1c1 0720 	rsb	r7, r1, #32
 8000806:	408b      	lsls	r3, r1
 8000808:	fa22 fc07 	lsr.w	ip, r2, r7
 800080c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000810:	fa25 fa07 	lsr.w	sl, r5, r7
 8000814:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000818:	fbba f8f9 	udiv	r8, sl, r9
 800081c:	408d      	lsls	r5, r1
 800081e:	fa20 f307 	lsr.w	r3, r0, r7
 8000822:	fb09 aa18 	mls	sl, r9, r8, sl
 8000826:	fa1f fe8c 	uxth.w	lr, ip
 800082a:	432b      	orrs	r3, r5
 800082c:	fa00 f501 	lsl.w	r5, r0, r1
 8000830:	fb08 f00e 	mul.w	r0, r8, lr
 8000834:	0c1c      	lsrs	r4, r3, #16
 8000836:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800083a:	42a0      	cmp	r0, r4
 800083c:	fa02 f201 	lsl.w	r2, r2, r1
 8000840:	d90b      	bls.n	800085a <__udivmoddi4+0x1b2>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f108 3aff 	add.w	sl, r8, #4294967295
 800084a:	f080 8086 	bcs.w	800095a <__udivmoddi4+0x2b2>
 800084e:	42a0      	cmp	r0, r4
 8000850:	f240 8083 	bls.w	800095a <__udivmoddi4+0x2b2>
 8000854:	f1a8 0802 	sub.w	r8, r8, #2
 8000858:	4464      	add	r4, ip
 800085a:	1a24      	subs	r4, r4, r0
 800085c:	b298      	uxth	r0, r3
 800085e:	fbb4 f3f9 	udiv	r3, r4, r9
 8000862:	fb09 4413 	mls	r4, r9, r3, r4
 8000866:	fb03 fe0e 	mul.w	lr, r3, lr
 800086a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800086e:	45a6      	cmp	lr, r4
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0x1dc>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f103 30ff 	add.w	r0, r3, #4294967295
 800087a:	d26a      	bcs.n	8000952 <__udivmoddi4+0x2aa>
 800087c:	45a6      	cmp	lr, r4
 800087e:	d968      	bls.n	8000952 <__udivmoddi4+0x2aa>
 8000880:	3b02      	subs	r3, #2
 8000882:	4464      	add	r4, ip
 8000884:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000888:	fba0 9302 	umull	r9, r3, r0, r2
 800088c:	eba4 040e 	sub.w	r4, r4, lr
 8000890:	429c      	cmp	r4, r3
 8000892:	46c8      	mov	r8, r9
 8000894:	469e      	mov	lr, r3
 8000896:	d354      	bcc.n	8000942 <__udivmoddi4+0x29a>
 8000898:	d051      	beq.n	800093e <__udivmoddi4+0x296>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d067      	beq.n	800096e <__udivmoddi4+0x2c6>
 800089e:	ebb5 0308 	subs.w	r3, r5, r8
 80008a2:	eb64 040e 	sbc.w	r4, r4, lr
 80008a6:	40cb      	lsrs	r3, r1
 80008a8:	fa04 f707 	lsl.w	r7, r4, r7
 80008ac:	431f      	orrs	r7, r3
 80008ae:	40cc      	lsrs	r4, r1
 80008b0:	e9c6 7400 	strd	r7, r4, [r6]
 80008b4:	2100      	movs	r1, #0
 80008b6:	e74a      	b.n	800074e <__udivmoddi4+0xa6>
 80008b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008bc:	f1c3 0020 	rsb	r0, r3, #32
 80008c0:	40c1      	lsrs	r1, r0
 80008c2:	409d      	lsls	r5, r3
 80008c4:	fa24 f000 	lsr.w	r0, r4, r0
 80008c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008cc:	4328      	orrs	r0, r5
 80008ce:	fbb1 f5f7 	udiv	r5, r1, r7
 80008d2:	fb07 1115 	mls	r1, r7, r5, r1
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	0c02      	lsrs	r2, r0, #16
 80008dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008e0:	fb05 f10e 	mul.w	r1, r5, lr
 80008e4:	4291      	cmp	r1, r2
 80008e6:	fa04 f403 	lsl.w	r4, r4, r3
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x256>
 80008ec:	eb1c 0202 	adds.w	r2, ip, r2
 80008f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f4:	d22f      	bcs.n	8000956 <__udivmoddi4+0x2ae>
 80008f6:	4291      	cmp	r1, r2
 80008f8:	d92d      	bls.n	8000956 <__udivmoddi4+0x2ae>
 80008fa:	3d02      	subs	r5, #2
 80008fc:	4462      	add	r2, ip
 80008fe:	1a52      	subs	r2, r2, r1
 8000900:	fbb2 f1f7 	udiv	r1, r2, r7
 8000904:	fb07 2211 	mls	r2, r7, r1, r2
 8000908:	b280      	uxth	r0, r0
 800090a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800090e:	fb01 f20e 	mul.w	r2, r1, lr
 8000912:	4282      	cmp	r2, r0
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x280>
 8000916:	eb1c 0000 	adds.w	r0, ip, r0
 800091a:	f101 38ff 	add.w	r8, r1, #4294967295
 800091e:	d216      	bcs.n	800094e <__udivmoddi4+0x2a6>
 8000920:	4282      	cmp	r2, r0
 8000922:	d914      	bls.n	800094e <__udivmoddi4+0x2a6>
 8000924:	3902      	subs	r1, #2
 8000926:	4460      	add	r0, ip
 8000928:	1a80      	subs	r0, r0, r2
 800092a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800092e:	e73a      	b.n	80007a6 <__udivmoddi4+0xfe>
 8000930:	4631      	mov	r1, r6
 8000932:	4630      	mov	r0, r6
 8000934:	e70b      	b.n	800074e <__udivmoddi4+0xa6>
 8000936:	4671      	mov	r1, lr
 8000938:	e6e9      	b.n	800070e <__udivmoddi4+0x66>
 800093a:	4610      	mov	r0, r2
 800093c:	e6fe      	b.n	800073c <__udivmoddi4+0x94>
 800093e:	454d      	cmp	r5, r9
 8000940:	d2ab      	bcs.n	800089a <__udivmoddi4+0x1f2>
 8000942:	ebb9 0802 	subs.w	r8, r9, r2
 8000946:	eb63 0e0c 	sbc.w	lr, r3, ip
 800094a:	3801      	subs	r0, #1
 800094c:	e7a5      	b.n	800089a <__udivmoddi4+0x1f2>
 800094e:	4641      	mov	r1, r8
 8000950:	e7ea      	b.n	8000928 <__udivmoddi4+0x280>
 8000952:	4603      	mov	r3, r0
 8000954:	e796      	b.n	8000884 <__udivmoddi4+0x1dc>
 8000956:	4645      	mov	r5, r8
 8000958:	e7d1      	b.n	80008fe <__udivmoddi4+0x256>
 800095a:	46d0      	mov	r8, sl
 800095c:	e77d      	b.n	800085a <__udivmoddi4+0x1b2>
 800095e:	4464      	add	r4, ip
 8000960:	3802      	subs	r0, #2
 8000962:	e749      	b.n	80007f8 <__udivmoddi4+0x150>
 8000964:	3d02      	subs	r5, #2
 8000966:	4462      	add	r2, ip
 8000968:	e731      	b.n	80007ce <__udivmoddi4+0x126>
 800096a:	4608      	mov	r0, r1
 800096c:	e70a      	b.n	8000784 <__udivmoddi4+0xdc>
 800096e:	4631      	mov	r1, r6
 8000970:	e6ed      	b.n	800074e <__udivmoddi4+0xa6>
 8000972:	bf00      	nop

08000974 <__aeabi_idiv0>:
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2203      	movs	r2, #3
 8000984:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2203      	movs	r2, #3
 8000990:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2203      	movs	r2, #3
 8000996:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2203      	movs	r2, #3
 800099c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2203      	movs	r2, #3
 80009a2:	715a      	strb	r2, [r3, #5]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b08a      	sub	sp, #40	; 0x28
 80009b2:	af04      	add	r7, sp, #16
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	460b      	mov	r3, r1
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80009c8:	7afb      	ldrb	r3, [r7, #11]
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	8af9      	ldrh	r1, [r7, #22]
 80009ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80009d2:	9302      	str	r3, [sp, #8]
 80009d4:	2302      	movs	r3, #2
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2301      	movs	r3, #1
 80009e0:	f001 fd3a 	bl	8002458 <HAL_I2C_Mem_Read>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10b      	bne.n	8000a02 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80009ea:	7d7b      	ldrb	r3, [r7, #21]
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	7d3b      	ldrb	r3, [r7, #20]
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b21b      	sxth	r3, r3
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	801a      	strh	r2, [r3, #0]
		return true;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <read_register16+0x56>
	} else
		return false;
 8000a02:	2300      	movs	r3, #0

}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af04      	add	r7, sp, #16
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	461a      	mov	r2, r3
 8000a18:	460b      	mov	r3, r1
 8000a1a:	72fb      	strb	r3, [r7, #11]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a2c:	7afb      	ldrb	r3, [r7, #11]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	7abb      	ldrb	r3, [r7, #10]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	8af9      	ldrh	r1, [r7, #22]
 8000a36:	f241 3488 	movw	r4, #5000	; 0x1388
 8000a3a:	9402      	str	r4, [sp, #8]
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	f001 fd08 	bl	8002458 <HAL_I2C_Mem_Read>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <read_data+0x46>
		return 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e000      	b.n	8000a54 <read_data+0x48>
	else
		return 1;
 8000a52:	2301      	movs	r3, #1

}
 8000a54:	4618      	mov	r0, r3
 8000a56:	371c      	adds	r7, #28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd90      	pop	{r4, r7, pc}

08000a5c <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	461a      	mov	r2, r3
 8000a68:	2188      	movs	r1, #136	; 0x88
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ff9f 	bl	80009ae <read_register16>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d06f      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3302      	adds	r3, #2
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	218a      	movs	r1, #138	; 0x8a
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ff95 	bl	80009ae <read_register16>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d065      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	461a      	mov	r2, r3
 8000a90:	218c      	movs	r1, #140	; 0x8c
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ff8b 	bl	80009ae <read_register16>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d05b      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3306      	adds	r3, #6
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	218e      	movs	r1, #142	; 0x8e
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ff81 	bl	80009ae <read_register16>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d051      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2190      	movs	r1, #144	; 0x90
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ff77 	bl	80009ae <read_register16>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d047      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	330a      	adds	r3, #10
 8000aca:	461a      	mov	r2, r3
 8000acc:	2192      	movs	r1, #146	; 0x92
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ff6d 	bl	80009ae <read_register16>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d03d      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	330c      	adds	r3, #12
 8000ade:	461a      	mov	r2, r3
 8000ae0:	2194      	movs	r1, #148	; 0x94
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ff63 	bl	80009ae <read_register16>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d033      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	330e      	adds	r3, #14
 8000af2:	461a      	mov	r2, r3
 8000af4:	2196      	movs	r1, #150	; 0x96
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ff59 	bl	80009ae <read_register16>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d029      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3310      	adds	r3, #16
 8000b06:	461a      	mov	r2, r3
 8000b08:	2198      	movs	r1, #152	; 0x98
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ff4f 	bl	80009ae <read_register16>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d01f      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3312      	adds	r3, #18
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	219a      	movs	r1, #154	; 0x9a
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff45 	bl	80009ae <read_register16>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d015      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3314      	adds	r3, #20
 8000b2e:	461a      	mov	r2, r3
 8000b30:	219c      	movs	r1, #156	; 0x9c
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ff3b 	bl	80009ae <read_register16>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00b      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000b42:	461a      	mov	r2, r3
 8000b44:	219e      	movs	r1, #158	; 0x9e
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff31 	bl	80009ae <read_register16>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <read_calibration_data+0xfa>

		return true;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <read_calibration_data+0xfc>
	}

	return false;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f103 0218 	add.w	r2, r3, #24
 8000b6e:	2301      	movs	r3, #1
 8000b70:	21a1      	movs	r1, #161	; 0xa1
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ff4a 	bl	8000a0c <read_data>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	331a      	adds	r3, #26
 8000b82:	461a      	mov	r2, r3
 8000b84:	21e1      	movs	r1, #225	; 0xe1
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff11 	bl	80009ae <read_register16>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d041      	beq.n	8000c16 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f103 021c 	add.w	r2, r3, #28
 8000b98:	2301      	movs	r3, #1
 8000b9a:	21e3      	movs	r1, #227	; 0xe3
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff35 	bl	8000a0c <read_data>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d136      	bne.n	8000c16 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000ba8:	f107 030e 	add.w	r3, r7, #14
 8000bac:	461a      	mov	r2, r3
 8000bae:	21e4      	movs	r1, #228	; 0xe4
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fefc 	bl	80009ae <read_register16>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d02c      	beq.n	8000c16 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	21e5      	movs	r1, #229	; 0xe5
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fef2 	bl	80009ae <read_register16>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d022      	beq.n	8000c16 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	21e7      	movs	r1, #231	; 0xe7
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff16 	bl	8000a0c <read_data>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d117      	bne.n	8000c16 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000be6:	89fb      	ldrh	r3, [r7, #14]
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	89fb      	ldrh	r3, [r7, #14]
 8000bf4:	121b      	asrs	r3, r3, #8
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	f003 030f 	and.w	r3, r3, #15
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000c06:	89bb      	ldrh	r3, [r7, #12]
 8000c08:	091b      	lsrs	r3, r3, #4
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	841a      	strh	r2, [r3, #32]

		return true;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <read_hum_calibration_data+0xb8>
	}

	return false;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af04      	add	r7, sp, #16
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	89f9      	ldrh	r1, [r7, #14]
 8000c42:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c46:	9302      	str	r3, [sp, #8]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	1cbb      	adds	r3, r7, #2
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2301      	movs	r3, #1
 8000c52:	f001 fb07 	bl	8002264 <HAL_I2C_Mem_Write>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <write_register8+0x40>
		return false;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e000      	b.n	8000c62 <write_register8+0x42>
	else
		return true;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c78:	2b76      	cmp	r3, #118	; 0x76
 8000c7a:	d005      	beq.n	8000c88 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c80:	2b77      	cmp	r3, #119	; 0x77
 8000c82:	d001      	beq.n	8000c88 <bmp280_init+0x1e>

		return false;
 8000c84:	2300      	movs	r3, #0
 8000c86:	e099      	b.n	8000dbc <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000c8e:	2301      	movs	r3, #1
 8000c90:	21d0      	movs	r1, #208	; 0xd0
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff feba 	bl	8000a0c <read_data>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <bmp280_init+0x38>
		return false;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e08c      	b.n	8000dbc <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000ca8:	2b58      	cmp	r3, #88	; 0x58
 8000caa:	d006      	beq.n	8000cba <bmp280_init+0x50>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000cb2:	2b60      	cmp	r3, #96	; 0x60
 8000cb4:	d001      	beq.n	8000cba <bmp280_init+0x50>

		return false;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e080      	b.n	8000dbc <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000cba:	22b6      	movs	r2, #182	; 0xb6
 8000cbc:	21e0      	movs	r1, #224	; 0xe0
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffae 	bl	8000c20 <write_register8>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <bmp280_init+0x64>
		return false;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e076      	b.n	8000dbc <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000cce:	f107 020c 	add.w	r2, r7, #12
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	21f3      	movs	r1, #243	; 0xf3
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fe98 	bl	8000a0c <read_data>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f5      	bne.n	8000cce <bmp280_init+0x64>
				&& (status & 1) == 0)
 8000ce2:	7b3b      	ldrb	r3, [r7, #12]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1f0      	bne.n	8000cce <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff feb5 	bl	8000a5c <read_calibration_data>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f083 0301 	eor.w	r3, r3, #1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d100      	bne.n	8000d00 <bmp280_init+0x96>
 8000cfe:	e001      	b.n	8000d04 <bmp280_init+0x9a>
		return false;
 8000d00:	2300      	movs	r3, #0
 8000d02:	e05b      	b.n	8000dbc <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000d0a:	2b60      	cmp	r3, #96	; 0x60
 8000d0c:	d10a      	bne.n	8000d24 <bmp280_init+0xba>
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ff26 	bl	8000b60 <read_hum_calibration_data>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f083 0301 	eor.w	r3, r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <bmp280_init+0xba>
		return false;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e04b      	b.n	8000dbc <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	795b      	ldrb	r3, [r3, #5]
 8000d28:	015b      	lsls	r3, r3, #5
 8000d2a:	b25a      	sxtb	r2, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	785b      	ldrb	r3, [r3, #1]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	b25b      	sxtb	r3, r3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	21f5      	movs	r1, #245	; 0xf5
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff6d 	bl	8000c20 <write_register8>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <bmp280_init+0xe6>
		return false;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e035      	b.n	8000dbc <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d102      	bne.n	8000d5e <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	78db      	ldrb	r3, [r3, #3]
 8000d62:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000d64:	b25a      	sxtb	r2, r3
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	789b      	ldrb	r3, [r3, #2]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b25a      	sxtb	r2, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000d7c:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000d84:	2b60      	cmp	r3, #96	; 0x60
 8000d86:	d10d      	bne.n	8000da4 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000d8e:	7b7b      	ldrb	r3, [r7, #13]
 8000d90:	461a      	mov	r2, r3
 8000d92:	21f2      	movs	r1, #242	; 0xf2
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff43 	bl	8000c20 <write_register8>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <bmp280_init+0x13a>
			return false;
 8000da0:	2300      	movs	r3, #0
 8000da2:	e00b      	b.n	8000dbc <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000da4:	7bbb      	ldrb	r3, [r7, #14]
 8000da6:	461a      	mov	r2, r3
 8000da8:	21f4      	movs	r1, #244	; 0xf4
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ff38 	bl	8000c20 <write_register8>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <bmp280_init+0x150>
		return false;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <bmp280_init+0x152>
	}

	return true;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	10da      	asrs	r2, r3, #3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000de6:	12db      	asrs	r3, r3, #11
 8000de8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	111b      	asrs	r3, r3, #4
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	8812      	ldrh	r2, [r2, #0]
 8000df2:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	1112      	asrs	r2, r2, #4
 8000df8:	68f9      	ldr	r1, [r7, #12]
 8000dfa:	8809      	ldrh	r1, [r1, #0]
 8000dfc:	1a52      	subs	r2, r2, r1
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000e0e:	139b      	asrs	r3, r3, #14
 8000e10:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	441a      	add	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	3380      	adds	r3, #128	; 0x80
 8000e28:	121b      	asrs	r3, r3, #8
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	371c      	adds	r7, #28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e38:	b0cc      	sub	sp, #304	; 0x130
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000e40:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8000e44:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e4c:	17da      	asrs	r2, r3, #31
 8000e4e:	461c      	mov	r4, r3
 8000e50:	4615      	mov	r5, r2
 8000e52:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8000e56:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000e5a:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000e5e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000e66:	fb03 f102 	mul.w	r1, r3, r2
 8000e6a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	18ca      	adds	r2, r1, r3
 8000e78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000e7c:	fba3 8903 	umull	r8, r9, r3, r3
 8000e80:	eb02 0309 	add.w	r3, r2, r9
 8000e84:	4699      	mov	r9, r3
 8000e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e8a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	17da      	asrs	r2, r3, #31
 8000e92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000e96:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000e9a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	fb03 f209 	mul.w	r2, r3, r9
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	fb08 f303 	mul.w	r3, r8, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	4602      	mov	r2, r0
 8000eae:	fba8 2102 	umull	r2, r1, r8, r2
 8000eb2:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8000eb6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8000eba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000ec4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8000ec8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8000ecc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ed4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	17da      	asrs	r2, r3, #31
 8000edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000ee0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ee8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000eec:	462a      	mov	r2, r5
 8000eee:	fb02 f203 	mul.w	r2, r2, r3
 8000ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ef6:	4621      	mov	r1, r4
 8000ef8:	fb01 f303 	mul.w	r3, r1, r3
 8000efc:	441a      	add	r2, r3
 8000efe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f02:	4621      	mov	r1, r4
 8000f04:	fba3 3101 	umull	r3, r1, r3, r1
 8000f08:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8000f0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f14:	18d3      	adds	r3, r2, r3
 8000f16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	f04f 0100 	mov.w	r1, #0
 8000f22:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000f26:	462b      	mov	r3, r5
 8000f28:	0459      	lsls	r1, r3, #17
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8000f30:	4623      	mov	r3, r4
 8000f32:	0458      	lsls	r0, r3, #17
 8000f34:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000f38:	1814      	adds	r4, r2, r0
 8000f3a:	643c      	str	r4, [r7, #64]	; 0x40
 8000f3c:	414b      	adcs	r3, r1
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8000f40:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000f44:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	17da      	asrs	r2, r3, #31
 8000f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000f58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000f5c:	f04f 0000 	mov.w	r0, #0
 8000f60:	f04f 0100 	mov.w	r1, #0
 8000f64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f68:	00d9      	lsls	r1, r3, #3
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000f70:	1814      	adds	r4, r2, r0
 8000f72:	63bc      	str	r4, [r7, #56]	; 0x38
 8000f74:	414b      	adcs	r3, r1
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f78:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000f7c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000f80:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f88:	fb03 f102 	mul.w	r1, r3, r2
 8000f8c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	18ca      	adds	r2, r1, r3
 8000f9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f9e:	fba3 3103 	umull	r3, r1, r3, r3
 8000fa2:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8000fa6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000fae:	18d3      	adds	r3, r2, r3
 8000fb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000fb8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	17da      	asrs	r2, r3, #31
 8000fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000fc4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000fc8:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8000fcc:	4622      	mov	r2, r4
 8000fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	fb01 f202 	mul.w	r2, r1, r2
 8000fd8:	464d      	mov	r5, r9
 8000fda:	4618      	mov	r0, r3
 8000fdc:	4621      	mov	r1, r4
 8000fde:	4603      	mov	r3, r0
 8000fe0:	fb03 f305 	mul.w	r3, r3, r5
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	4641      	mov	r1, r8
 8000fea:	fba2 2101 	umull	r2, r1, r2, r1
 8000fee:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8000ff2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8000ff6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001000:	f04f 0000 	mov.w	r0, #0
 8001004:	f04f 0100 	mov.w	r1, #0
 8001008:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800100c:	4623      	mov	r3, r4
 800100e:	0a18      	lsrs	r0, r3, #8
 8001010:	462a      	mov	r2, r5
 8001012:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001016:	462b      	mov	r3, r5
 8001018:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800101a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800101e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001022:	b21b      	sxth	r3, r3
 8001024:	17da      	asrs	r2, r3, #31
 8001026:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800102a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800102e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001032:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001036:	464a      	mov	r2, r9
 8001038:	fb02 f203 	mul.w	r2, r2, r3
 800103c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001040:	4644      	mov	r4, r8
 8001042:	fb04 f303 	mul.w	r3, r4, r3
 8001046:	441a      	add	r2, r3
 8001048:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800104c:	4644      	mov	r4, r8
 800104e:	fba3 3404 	umull	r3, r4, r3, r4
 8001052:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001056:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800105a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800105e:	18d3      	adds	r3, r2, r3
 8001060:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001070:	464c      	mov	r4, r9
 8001072:	0323      	lsls	r3, r4, #12
 8001074:	46c4      	mov	ip, r8
 8001076:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 800107a:	4644      	mov	r4, r8
 800107c:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800107e:	1884      	adds	r4, r0, r2
 8001080:	633c      	str	r4, [r7, #48]	; 0x30
 8001082:	eb41 0303 	adc.w	r3, r1, r3
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
 8001088:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800108c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001090:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001094:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001098:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800109c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80010a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010a4:	88db      	ldrh	r3, [r3, #6]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80010ae:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80010b2:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80010b6:	4622      	mov	r2, r4
 80010b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80010bc:	4641      	mov	r1, r8
 80010be:	fb01 f202 	mul.w	r2, r1, r2
 80010c2:	464d      	mov	r5, r9
 80010c4:	4618      	mov	r0, r3
 80010c6:	4621      	mov	r1, r4
 80010c8:	4603      	mov	r3, r0
 80010ca:	fb03 f305 	mul.w	r3, r3, r5
 80010ce:	4413      	add	r3, r2
 80010d0:	4602      	mov	r2, r0
 80010d2:	4641      	mov	r1, r8
 80010d4:	fba2 2101 	umull	r2, r1, r2, r1
 80010d8:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80010dc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80010e0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80010e4:	4413      	add	r3, r2
 80010e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80010f6:	4629      	mov	r1, r5
 80010f8:	104a      	asrs	r2, r1, #1
 80010fa:	4629      	mov	r1, r5
 80010fc:	17cb      	asrs	r3, r1, #31
 80010fe:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001102:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001106:	4313      	orrs	r3, r2
 8001108:	d101      	bne.n	800110e <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 800110a:	2300      	movs	r3, #0
 800110c:	e146      	b.n	800139c <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 800110e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001112:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001116:	17da      	asrs	r2, r3, #31
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
 800111a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800111c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001120:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001124:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001128:	105b      	asrs	r3, r3, #1
 800112a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800112e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001132:	07db      	lsls	r3, r3, #31
 8001134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001138:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800113c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001140:	4604      	mov	r4, r0
 8001142:	1aa4      	subs	r4, r4, r2
 8001144:	67bc      	str	r4, [r7, #120]	; 0x78
 8001146:	eb61 0303 	sbc.w	r3, r1, r3
 800114a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800114c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001150:	4622      	mov	r2, r4
 8001152:	462b      	mov	r3, r5
 8001154:	1891      	adds	r1, r2, r2
 8001156:	6239      	str	r1, [r7, #32]
 8001158:	415b      	adcs	r3, r3
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
 800115c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001160:	4621      	mov	r1, r4
 8001162:	1851      	adds	r1, r2, r1
 8001164:	61b9      	str	r1, [r7, #24]
 8001166:	4629      	mov	r1, r5
 8001168:	414b      	adcs	r3, r1
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001178:	4649      	mov	r1, r9
 800117a:	018b      	lsls	r3, r1, #6
 800117c:	4641      	mov	r1, r8
 800117e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001182:	4641      	mov	r1, r8
 8001184:	018a      	lsls	r2, r1, #6
 8001186:	4641      	mov	r1, r8
 8001188:	1889      	adds	r1, r1, r2
 800118a:	6139      	str	r1, [r7, #16]
 800118c:	4649      	mov	r1, r9
 800118e:	eb43 0101 	adc.w	r1, r3, r1
 8001192:	6179      	str	r1, [r7, #20]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011a0:	4649      	mov	r1, r9
 80011a2:	008b      	lsls	r3, r1, #2
 80011a4:	46c4      	mov	ip, r8
 80011a6:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80011aa:	4641      	mov	r1, r8
 80011ac:	008a      	lsls	r2, r1, #2
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	4622      	mov	r2, r4
 80011b6:	189b      	adds	r3, r3, r2
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	460b      	mov	r3, r1
 80011bc:	462a      	mov	r2, r5
 80011be:	eb42 0303 	adc.w	r3, r2, r3
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80011d0:	4649      	mov	r1, r9
 80011d2:	008b      	lsls	r3, r1, #2
 80011d4:	46c4      	mov	ip, r8
 80011d6:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80011da:	4641      	mov	r1, r8
 80011dc:	008a      	lsls	r2, r1, #2
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	4603      	mov	r3, r0
 80011e4:	4622      	mov	r2, r4
 80011e6:	189b      	adds	r3, r3, r2
 80011e8:	673b      	str	r3, [r7, #112]	; 0x70
 80011ea:	462b      	mov	r3, r5
 80011ec:	460a      	mov	r2, r1
 80011ee:	eb42 0303 	adc.w	r3, r2, r3
 80011f2:	677b      	str	r3, [r7, #116]	; 0x74
 80011f4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80011f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80011fc:	f7ff fa04 	bl	8000608 <__aeabi_ldivmod>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800120c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001210:	b21b      	sxth	r3, r3
 8001212:	17da      	asrs	r2, r3, #31
 8001214:	66bb      	str	r3, [r7, #104]	; 0x68
 8001216:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001218:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	f04f 0100 	mov.w	r1, #0
 8001224:	0b50      	lsrs	r0, r2, #13
 8001226:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800122a:	1359      	asrs	r1, r3, #13
 800122c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001230:	462b      	mov	r3, r5
 8001232:	fb00 f203 	mul.w	r2, r0, r3
 8001236:	4623      	mov	r3, r4
 8001238:	fb03 f301 	mul.w	r3, r3, r1
 800123c:	4413      	add	r3, r2
 800123e:	4622      	mov	r2, r4
 8001240:	fba2 2100 	umull	r2, r1, r2, r0
 8001244:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001248:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800124c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001250:	4413      	add	r3, r2
 8001252:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001256:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800125a:	f04f 0000 	mov.w	r0, #0
 800125e:	f04f 0100 	mov.w	r1, #0
 8001262:	0b50      	lsrs	r0, r2, #13
 8001264:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001268:	1359      	asrs	r1, r3, #13
 800126a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800126e:	462b      	mov	r3, r5
 8001270:	fb00 f203 	mul.w	r2, r0, r3
 8001274:	4623      	mov	r3, r4
 8001276:	fb03 f301 	mul.w	r3, r3, r1
 800127a:	4413      	add	r3, r2
 800127c:	4622      	mov	r2, r4
 800127e:	fba2 2100 	umull	r2, r1, r2, r0
 8001282:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001286:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800128a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800128e:	4413      	add	r3, r2
 8001290:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80012a0:	4621      	mov	r1, r4
 80012a2:	0e4a      	lsrs	r2, r1, #25
 80012a4:	4620      	mov	r0, r4
 80012a6:	4629      	mov	r1, r5
 80012a8:	460c      	mov	r4, r1
 80012aa:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80012ae:	164b      	asrs	r3, r1, #25
 80012b0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80012b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012b8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	17da      	asrs	r2, r3, #31
 80012c0:	663b      	str	r3, [r7, #96]	; 0x60
 80012c2:	667a      	str	r2, [r7, #100]	; 0x64
 80012c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80012c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80012cc:	462a      	mov	r2, r5
 80012ce:	fb02 f203 	mul.w	r2, r2, r3
 80012d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80012d6:	4621      	mov	r1, r4
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	4413      	add	r3, r2
 80012de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012e2:	4621      	mov	r1, r4
 80012e4:	fba2 2101 	umull	r2, r1, r2, r1
 80012e8:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80012ec:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80012f0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80012f4:	4413      	add	r3, r2
 80012f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	f04f 0300 	mov.w	r3, #0
 8001302:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001306:	4621      	mov	r1, r4
 8001308:	0cca      	lsrs	r2, r1, #19
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	460c      	mov	r4, r1
 8001310:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001314:	14cb      	asrs	r3, r1, #19
 8001316:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800131a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800131e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001322:	1884      	adds	r4, r0, r2
 8001324:	65bc      	str	r4, [r7, #88]	; 0x58
 8001326:	eb41 0303 	adc.w	r3, r1, r3
 800132a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800132c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001330:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001334:	4621      	mov	r1, r4
 8001336:	1889      	adds	r1, r1, r2
 8001338:	6539      	str	r1, [r7, #80]	; 0x50
 800133a:	4629      	mov	r1, r5
 800133c:	eb43 0101 	adc.w	r1, r3, r1
 8001340:	6579      	str	r1, [r7, #84]	; 0x54
 8001342:	f04f 0000 	mov.w	r0, #0
 8001346:	f04f 0100 	mov.w	r1, #0
 800134a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800134e:	4623      	mov	r3, r4
 8001350:	0a18      	lsrs	r0, r3, #8
 8001352:	462a      	mov	r2, r5
 8001354:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001358:	462b      	mov	r3, r5
 800135a:	1219      	asrs	r1, r3, #8
 800135c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001360:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001364:	b21b      	sxth	r3, r3
 8001366:	17da      	asrs	r2, r3, #31
 8001368:	64bb      	str	r3, [r7, #72]	; 0x48
 800136a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001378:	464c      	mov	r4, r9
 800137a:	0123      	lsls	r3, r4, #4
 800137c:	46c4      	mov	ip, r8
 800137e:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001382:	4644      	mov	r4, r8
 8001384:	0122      	lsls	r2, r4, #4
 8001386:	1884      	adds	r4, r0, r2
 8001388:	603c      	str	r4, [r7, #0]
 800138a:	eb41 0303 	adc.w	r3, r1, r3
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001394:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001398:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 800139c:	4618      	mov	r0, r3
 800139e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80013a2:	46bd      	mov	sp, r7
 80013a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080013a8 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80013ba:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	039a      	lsls	r2, r3, #14
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013d0:	4619      	mov	r1, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	fb01 f303 	mul.w	r3, r1, r3
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013de:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80013e6:	4611      	mov	r1, r2
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	fb01 f202 	mul.w	r2, r1, r2
 80013ee:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80013f0:	68f9      	ldr	r1, [r7, #12]
 80013f2:	7f09      	ldrb	r1, [r1, #28]
 80013f4:	4608      	mov	r0, r1
 80013f6:	6979      	ldr	r1, [r7, #20]
 80013f8:	fb00 f101 	mul.w	r1, r0, r1
 80013fc:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80013fe:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001402:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001406:	1292      	asrs	r2, r2, #10
 8001408:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800140c:	68f9      	ldr	r1, [r7, #12]
 800140e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001412:	fb01 f202 	mul.w	r2, r1, r2
 8001416:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800141a:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	13db      	asrs	r3, r3, #15
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	13d2      	asrs	r2, r2, #15
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	7e12      	ldrb	r2, [r2, #24]
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001446:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800144e:	bfa8      	it	ge
 8001450:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001454:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	131b      	asrs	r3, r3, #12
}
 800145a:	4618      	mov	r0, r3
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001478:	2b60      	cmp	r3, #96	; 0x60
 800147a:	d007      	beq.n	800148c <bmp280_read_fixed+0x28>
		if (humidity)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <bmp280_read_fixed+0x32>
 8001492:	2308      	movs	r3, #8
 8001494:	e000      	b.n	8001498 <bmp280_read_fixed+0x34>
 8001496:	2306      	movs	r3, #6
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f107 0218 	add.w	r2, r7, #24
 80014a2:	21f7      	movs	r1, #247	; 0xf7
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff fab1 	bl	8000a0c <read_data>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <bmp280_read_fixed+0x50>
		return false;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e038      	b.n	8001526 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80014b4:	7e3b      	ldrb	r3, [r7, #24]
 80014b6:	031a      	lsls	r2, r3, #12
 80014b8:	7e7b      	ldrb	r3, [r7, #25]
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4313      	orrs	r3, r2
 80014be:	7eba      	ldrb	r2, [r7, #26]
 80014c0:	0912      	lsrs	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	4313      	orrs	r3, r2
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80014c8:	7efb      	ldrb	r3, [r7, #27]
 80014ca:	031a      	lsls	r2, r3, #12
 80014cc:	7f3b      	ldrb	r3, [r7, #28]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4313      	orrs	r3, r2
 80014d2:	7f7a      	ldrb	r2, [r7, #29]
 80014d4:	0912      	lsrs	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	4313      	orrs	r3, r2
 80014da:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	461a      	mov	r2, r3
 80014e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f7ff fc6d 	bl	8000dc4 <compensate_temperature>
 80014ea:	4602      	mov	r2, r0
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	461a      	mov	r2, r3
 80014f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff fc9c 	bl	8000e34 <compensate_pressure>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00d      	beq.n	8001524 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001508:	7fbb      	ldrb	r3, [r7, #30]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	7ffa      	ldrb	r2, [r7, #31]
 800150e:	4313      	orrs	r3, r2
 8001510:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	461a      	mov	r2, r3
 8001516:	6a39      	ldr	r1, [r7, #32]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff ff45 	bl	80013a8 <compensate_humidity>
 800151e:	4602      	mov	r2, r0
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	3730      	adds	r7, #48	; 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <bmp280_read_float+0x1a>
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	e000      	b.n	800154c <bmp280_read_float+0x1c>
 800154a:	2300      	movs	r3, #0
 800154c:	f107 0218 	add.w	r2, r7, #24
 8001550:	f107 011c 	add.w	r1, r7, #28
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f7ff ff85 	bl	8001464 <bmp280_read_fixed>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d02d      	beq.n	80015bc <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe feac 	bl	80002c0 <__aeabi_i2f>
 8001568:	4603      	mov	r3, r0
 800156a:	4917      	ldr	r1, [pc, #92]	; (80015c8 <bmp280_read_float+0x98>)
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffaf 	bl	80004d0 <__aeabi_fdiv>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fe9b 	bl	80002b8 <__aeabi_ui2f>
 8001582:	4603      	mov	r3, r0
 8001584:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffa1 	bl	80004d0 <__aeabi_fdiv>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	601a      	str	r2, [r3, #0]
		if (humidity)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00d      	beq.n	80015b8 <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe fe8a 	bl	80002b8 <__aeabi_ui2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff90 	bl	80004d0 <__aeabi_fdiv>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	601a      	str	r2, [r3, #0]
		return true;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <bmp280_read_float+0x8e>
	}

	return false;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	42c80000 	.word	0x42c80000

080015cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d0:	f000 f9e4 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d4:	f000 f83a 	bl	800164c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d8:	f000 f8ac 	bl	8001734 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015dc:	f000 f87c 	bl	80016d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bmp280_init_default_params(&bmp280.params);
 80015e0:	4814      	ldr	r0, [pc, #80]	; (8001634 <main+0x68>)
 80015e2:	f7ff f9c9 	bl	8000978 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <main+0x6c>)
 80015e8:	2276      	movs	r2, #118	; 0x76
 80015ea:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <main+0x6c>)
 80015ee:	4a13      	ldr	r2, [pc, #76]	; (800163c <main+0x70>)
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)) {
 80015f2:	e001      	b.n	80015f8 <main+0x2c>
	Error_Handler();
 80015f4:	f000 f8f6 	bl	80017e4 <Error_Handler>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <main+0x68>)
 80015fa:	480f      	ldr	r0, [pc, #60]	; (8001638 <main+0x6c>)
 80015fc:	f7ff fb35 	bl	8000c6a <bmp280_init>
 8001600:	4603      	mov	r3, r0
 8001602:	f083 0301 	eor.w	r3, r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f3      	bne.n	80015f4 <main+0x28>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 800160c:	e001      	b.n	8001612 <main+0x46>
			Error_Handler();
 800160e:	f000 f8e9 	bl	80017e4 <Error_Handler>
		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <main+0x74>)
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <main+0x78>)
 8001616:	490c      	ldr	r1, [pc, #48]	; (8001648 <main+0x7c>)
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <main+0x6c>)
 800161a:	f7ff ff89 	bl	8001530 <bmp280_read_float>
 800161e:	4603      	mov	r3, r0
 8001620:	f083 0301 	eor.w	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f1      	bne.n	800160e <main+0x42>
		}

		HAL_Delay(100);
 800162a:	2064      	movs	r0, #100	; 0x64
 800162c:	f000 fa18 	bl	8001a60 <HAL_Delay>
		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001630:	e7ef      	b.n	8001612 <main+0x46>
 8001632:	bf00      	nop
 8001634:	200000a8 	.word	0x200000a8
 8001638:	2000007c 	.word	0x2000007c
 800163c:	20000028 	.word	0x20000028
 8001640:	200000b8 	.word	0x200000b8
 8001644:	200000b0 	.word	0x200000b0
 8001648:	200000b4 	.word	0x200000b4

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b090      	sub	sp, #64	; 0x40
 8001650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001652:	f107 0318 	add.w	r3, r7, #24
 8001656:	2228      	movs	r2, #40	; 0x28
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f002 f914 	bl	8003888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167c:	2301      	movs	r3, #1
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001680:	2302      	movs	r3, #2
 8001682:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800168a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800168e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001690:	f107 0318 	add.w	r3, r7, #24
 8001694:	4618      	mov	r0, r3
 8001696:	f001 fcfb 	bl	8003090 <HAL_RCC_OscConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016a0:	f000 f8a0 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a4:	230f      	movs	r3, #15
 80016a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a8:	2302      	movs	r3, #2
 80016aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2102      	movs	r1, #2
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 ff68 	bl	8003594 <HAL_RCC_ClockConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016ca:	f000 f88b 	bl	80017e4 <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	3740      	adds	r7, #64	; 0x40
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_I2C1_Init+0x50>)
 80016de:	4a13      	ldr	r2, [pc, #76]	; (800172c <MX_I2C1_Init+0x54>)
 80016e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_I2C1_Init+0x50>)
 80016e4:	4a12      	ldr	r2, [pc, #72]	; (8001730 <MX_I2C1_Init+0x58>)
 80016e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_I2C1_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_I2C1_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_I2C1_Init+0x50>)
 80016f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <MX_I2C1_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_I2C1_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <MX_I2C1_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_I2C1_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <MX_I2C1_Init+0x50>)
 8001716:	f000 fc61 	bl	8001fdc <HAL_I2C_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001720:	f000 f860 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000028 	.word	0x20000028
 800172c:	40005400 	.word	0x40005400
 8001730:	000186a0 	.word	0x000186a0

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <MX_GPIO_Init+0xa8>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a23      	ldr	r2, [pc, #140]	; (80017dc <MX_GPIO_Init+0xa8>)
 800174e:	f043 0310 	orr.w	r3, r3, #16
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b21      	ldr	r3, [pc, #132]	; (80017dc <MX_GPIO_Init+0xa8>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <MX_GPIO_Init+0xa8>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <MX_GPIO_Init+0xa8>)
 8001766:	f043 0320 	orr.w	r3, r3, #32
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_GPIO_Init+0xa8>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_GPIO_Init+0xa8>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a17      	ldr	r2, [pc, #92]	; (80017dc <MX_GPIO_Init+0xa8>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_GPIO_Init+0xa8>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_GPIO_Init+0xa8>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a11      	ldr	r2, [pc, #68]	; (80017dc <MX_GPIO_Init+0xa8>)
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_GPIO_Init+0xa8>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ae:	480c      	ldr	r0, [pc, #48]	; (80017e0 <MX_GPIO_Init+0xac>)
 80017b0:	f000 fbe2 	bl	8001f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	4619      	mov	r1, r3
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_GPIO_Init+0xac>)
 80017ce:	f000 fa4f 	bl	8001c70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40011000 	.word	0x40011000

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f0:	4807      	ldr	r0, [pc, #28]	; (8001810 <Error_Handler+0x2c>)
 80017f2:	f000 fbd9 	bl	8001fa8 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80017f6:	2032      	movs	r0, #50	; 0x32
 80017f8:	f000 f932 	bl	8001a60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001800:	4803      	ldr	r0, [pc, #12]	; (8001810 <Error_Handler+0x2c>)
 8001802:	f000 fbd1 	bl	8001fa8 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8001806:	2032      	movs	r0, #50	; 0x32
 8001808:	f000 f92a 	bl	8001a60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800180c:	e7ee      	b.n	80017ec <Error_Handler+0x8>
 800180e:	bf00      	nop
 8001810:	40011000 	.word	0x40011000

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_MspInit+0x5c>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_MspInit+0x5c>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_MspInit+0x5c>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_MspInit+0x5c>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_MspInit+0x5c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_MspInit+0x5c>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_MspInit+0x60>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_MspInit+0x60>)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40021000 	.word	0x40021000
 8001874:	40010000 	.word	0x40010000

08001878 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <HAL_I2C_MspInit+0x70>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d123      	bne.n	80018e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <HAL_I2C_MspInit+0x74>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a13      	ldr	r2, [pc, #76]	; (80018ec <HAL_I2C_MspInit+0x74>)
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_I2C_MspInit+0x74>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018b0:	23c0      	movs	r3, #192	; 0xc0
 80018b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b4:	2312      	movs	r3, #18
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	4619      	mov	r1, r3
 80018c2:	480b      	ldr	r0, [pc, #44]	; (80018f0 <HAL_I2C_MspInit+0x78>)
 80018c4:	f000 f9d4 	bl	8001c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_I2C_MspInit+0x74>)
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_I2C_MspInit+0x74>)
 80018ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d2:	61d3      	str	r3, [r2, #28]
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_I2C_MspInit+0x74>)
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40005400 	.word	0x40005400
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010c00 	.word	0x40010c00

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f8:	e7fe      	b.n	80018f8 <NMI_Handler+0x4>

080018fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <MemManage_Handler+0x4>

08001906 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <UsageFault_Handler+0x4>

08001912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193a:	f000 f875 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}

08001942 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
	...

08001950 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001950:	f7ff fff7 	bl	8001942 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001956:	490c      	ldr	r1, [pc, #48]	; (8001988 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001958:	4a0c      	ldr	r2, [pc, #48]	; (800198c <LoopFillZerobss+0x16>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800195c:	e002      	b.n	8001964 <LoopCopyDataInit>

0800195e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001962:	3304      	adds	r3, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001968:	d3f9      	bcc.n	800195e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800196c:	4c09      	ldr	r4, [pc, #36]	; (8001994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001970:	e001      	b.n	8001976 <LoopFillZerobss>

08001972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001974:	3204      	adds	r2, #4

08001976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001978:	d3fb      	bcc.n	8001972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197a:	f001 ff8d 	bl	8003898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800197e:	f7ff fe25 	bl	80015cc <main>
  bx lr
 8001982:	4770      	bx	lr
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800198c:	08003934 	.word	0x08003934
  ldr r2, =_sbss
 8001990:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001994:	200000c0 	.word	0x200000c0

08001998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC1_2_IRQHandler>
	...

0800199c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_Init+0x28>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_Init+0x28>)
 80019a6:	f043 0310 	orr.w	r3, r3, #16
 80019aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f92b 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	200f      	movs	r0, #15
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff ff2c 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40022000 	.word	0x40022000

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f935 	bl	8001c56 <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 f90b 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_IncTick+0x1c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_IncTick+0x20>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_IncTick+0x20>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	20000008 	.word	0x20000008
 8001a48:	200000bc 	.word	0x200000bc

08001a4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <HAL_GetTick+0x10>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	200000bc 	.word	0x200000bc

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff fff0 	bl	8001a4c <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_Delay+0x44>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffe0 	bl	8001a4c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <__NVIC_GetPriorityGrouping+0x18>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0307 	and.w	r3, r3, #7
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	; (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	; (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ff90 	bl	8001b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff49 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff5e 	bl	8001af0 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff90 	bl	8001b60 <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5f 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffb0 	bl	8001bc4 <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b08b      	sub	sp, #44	; 0x2c
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	e169      	b.n	8001f58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c84:	2201      	movs	r2, #1
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8158 	bne.w	8001f52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a9a      	ldr	r2, [pc, #616]	; (8001f10 <HAL_GPIO_Init+0x2a0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d05e      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cac:	4a98      	ldr	r2, [pc, #608]	; (8001f10 <HAL_GPIO_Init+0x2a0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d875      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cb2:	4a98      	ldr	r2, [pc, #608]	; (8001f14 <HAL_GPIO_Init+0x2a4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d058      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cb8:	4a96      	ldr	r2, [pc, #600]	; (8001f14 <HAL_GPIO_Init+0x2a4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d86f      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cbe:	4a96      	ldr	r2, [pc, #600]	; (8001f18 <HAL_GPIO_Init+0x2a8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d052      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cc4:	4a94      	ldr	r2, [pc, #592]	; (8001f18 <HAL_GPIO_Init+0x2a8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d869      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cca:	4a94      	ldr	r2, [pc, #592]	; (8001f1c <HAL_GPIO_Init+0x2ac>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04c      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cd0:	4a92      	ldr	r2, [pc, #584]	; (8001f1c <HAL_GPIO_Init+0x2ac>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d863      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cd6:	4a92      	ldr	r2, [pc, #584]	; (8001f20 <HAL_GPIO_Init+0x2b0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d046      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cdc:	4a90      	ldr	r2, [pc, #576]	; (8001f20 <HAL_GPIO_Init+0x2b0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d85d      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d82a      	bhi.n	8001d3c <HAL_GPIO_Init+0xcc>
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d859      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cea:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <HAL_GPIO_Init+0x80>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d6b 	.word	0x08001d6b
 8001cf4:	08001d45 	.word	0x08001d45
 8001cf8:	08001d57 	.word	0x08001d57
 8001cfc:	08001d99 	.word	0x08001d99
 8001d00:	08001d9f 	.word	0x08001d9f
 8001d04:	08001d9f 	.word	0x08001d9f
 8001d08:	08001d9f 	.word	0x08001d9f
 8001d0c:	08001d9f 	.word	0x08001d9f
 8001d10:	08001d9f 	.word	0x08001d9f
 8001d14:	08001d9f 	.word	0x08001d9f
 8001d18:	08001d9f 	.word	0x08001d9f
 8001d1c:	08001d9f 	.word	0x08001d9f
 8001d20:	08001d9f 	.word	0x08001d9f
 8001d24:	08001d9f 	.word	0x08001d9f
 8001d28:	08001d9f 	.word	0x08001d9f
 8001d2c:	08001d9f 	.word	0x08001d9f
 8001d30:	08001d9f 	.word	0x08001d9f
 8001d34:	08001d4d 	.word	0x08001d4d
 8001d38:	08001d61 	.word	0x08001d61
 8001d3c:	4a79      	ldr	r2, [pc, #484]	; (8001f24 <HAL_GPIO_Init+0x2b4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d42:	e02c      	b.n	8001d9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	623b      	str	r3, [r7, #32]
          break;
 8001d4a:	e029      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	3304      	adds	r3, #4
 8001d52:	623b      	str	r3, [r7, #32]
          break;
 8001d54:	e024      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	3308      	adds	r3, #8
 8001d5c:	623b      	str	r3, [r7, #32]
          break;
 8001d5e:	e01f      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	330c      	adds	r3, #12
 8001d66:	623b      	str	r3, [r7, #32]
          break;
 8001d68:	e01a      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d72:	2304      	movs	r3, #4
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e013      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d80:	2308      	movs	r3, #8
 8001d82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	611a      	str	r2, [r3, #16]
          break;
 8001d8a:	e009      	b.n	8001da0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	615a      	str	r2, [r3, #20]
          break;
 8001d96:	e003      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          break;
 8001d9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2bff      	cmp	r3, #255	; 0xff
 8001da4:	d801      	bhi.n	8001daa <HAL_GPIO_Init+0x13a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	e001      	b.n	8001dae <HAL_GPIO_Init+0x13e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2bff      	cmp	r3, #255	; 0xff
 8001db4:	d802      	bhi.n	8001dbc <HAL_GPIO_Init+0x14c>
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_Init+0x152>
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	3b08      	subs	r3, #8
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	210f      	movs	r1, #15
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	6a39      	ldr	r1, [r7, #32]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80b1 	beq.w	8001f52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001df0:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a4c      	ldr	r2, [pc, #304]	; (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e08:	4a48      	ldr	r2, [pc, #288]	; (8001f2c <HAL_GPIO_Init+0x2bc>)
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a40      	ldr	r2, [pc, #256]	; (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_GPIO_Init+0x1ec>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3f      	ldr	r2, [pc, #252]	; (8001f34 <HAL_GPIO_Init+0x2c4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00d      	beq.n	8001e58 <HAL_GPIO_Init+0x1e8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3e      	ldr	r2, [pc, #248]	; (8001f38 <HAL_GPIO_Init+0x2c8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_Init+0x1e4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3d      	ldr	r2, [pc, #244]	; (8001f3c <HAL_GPIO_Init+0x2cc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_GPIO_Init+0x1e0>
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e006      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e004      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e002      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	f002 0203 	and.w	r2, r2, #3
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	4093      	lsls	r3, r2
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e6e:	492f      	ldr	r1, [pc, #188]	; (8001f2c <HAL_GPIO_Init+0x2bc>)
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	492c      	ldr	r1, [pc, #176]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e96:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	4928      	ldr	r1, [pc, #160]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	4922      	ldr	r1, [pc, #136]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	491e      	ldr	r1, [pc, #120]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4918      	ldr	r1, [pc, #96]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	4914      	ldr	r1, [pc, #80]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d021      	beq.n	8001f44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	490e      	ldr	r1, [pc, #56]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
 8001f0c:	e021      	b.n	8001f52 <HAL_GPIO_Init+0x2e2>
 8001f0e:	bf00      	nop
 8001f10:	10320000 	.word	0x10320000
 8001f14:	10310000 	.word	0x10310000
 8001f18:	10220000 	.word	0x10220000
 8001f1c:	10210000 	.word	0x10210000
 8001f20:	10120000 	.word	0x10120000
 8001f24:	10110000 	.word	0x10110000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40010800 	.word	0x40010800
 8001f34:	40010c00 	.word	0x40010c00
 8001f38:	40011000 	.word	0x40011000
 8001f3c:	40011400 	.word	0x40011400
 8001f40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_GPIO_Init+0x304>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	4909      	ldr	r1, [pc, #36]	; (8001f74 <HAL_GPIO_Init+0x304>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	3301      	adds	r3, #1
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f47f ae8e 	bne.w	8001c84 <HAL_GPIO_Init+0x14>
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	372c      	adds	r7, #44	; 0x2c
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f94:	e003      	b.n	8001f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	041a      	lsls	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	611a      	str	r2, [r3, #16]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43d9      	mvns	r1, r3
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	400b      	ands	r3, r1
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e12b      	b.n	8002246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fc38 	bl	8001878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2224      	movs	r2, #36	; 0x24
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800202e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800203e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002040:	f001 fbf0 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4a81      	ldr	r2, [pc, #516]	; (8002250 <HAL_I2C_Init+0x274>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d807      	bhi.n	8002060 <HAL_I2C_Init+0x84>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4a80      	ldr	r2, [pc, #512]	; (8002254 <HAL_I2C_Init+0x278>)
 8002054:	4293      	cmp	r3, r2
 8002056:	bf94      	ite	ls
 8002058:	2301      	movls	r3, #1
 800205a:	2300      	movhi	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e006      	b.n	800206e <HAL_I2C_Init+0x92>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4a7d      	ldr	r2, [pc, #500]	; (8002258 <HAL_I2C_Init+0x27c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	bf94      	ite	ls
 8002068:	2301      	movls	r3, #1
 800206a:	2300      	movhi	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0e7      	b.n	8002246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a78      	ldr	r2, [pc, #480]	; (800225c <HAL_I2C_Init+0x280>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0c9b      	lsrs	r3, r3, #18
 8002080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a6a      	ldr	r2, [pc, #424]	; (8002250 <HAL_I2C_Init+0x274>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d802      	bhi.n	80020b0 <HAL_I2C_Init+0xd4>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3301      	adds	r3, #1
 80020ae:	e009      	b.n	80020c4 <HAL_I2C_Init+0xe8>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	4a69      	ldr	r2, [pc, #420]	; (8002260 <HAL_I2C_Init+0x284>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	3301      	adds	r3, #1
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	495c      	ldr	r1, [pc, #368]	; (8002250 <HAL_I2C_Init+0x274>)
 80020e0:	428b      	cmp	r3, r1
 80020e2:	d819      	bhi.n	8002118 <HAL_I2C_Init+0x13c>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1e59      	subs	r1, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f2:	1c59      	adds	r1, r3, #1
 80020f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020f8:	400b      	ands	r3, r1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_I2C_Init+0x138>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1e59      	subs	r1, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fbb1 f3f3 	udiv	r3, r1, r3
 800210c:	3301      	adds	r3, #1
 800210e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002112:	e051      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002114:	2304      	movs	r3, #4
 8002116:	e04f      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d111      	bne.n	8002144 <HAL_I2C_Init+0x168>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	440b      	add	r3, r1
 800212e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e012      	b.n	800216a <HAL_I2C_Init+0x18e>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1e58      	subs	r0, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	0099      	lsls	r1, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	fbb0 f3f3 	udiv	r3, r0, r3
 800215a:	3301      	adds	r3, #1
 800215c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Init+0x196>
 800216e:	2301      	movs	r3, #1
 8002170:	e022      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10e      	bne.n	8002198 <HAL_I2C_Init+0x1bc>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1e58      	subs	r0, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6859      	ldr	r1, [r3, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	440b      	add	r3, r1
 8002188:	fbb0 f3f3 	udiv	r3, r0, r3
 800218c:	3301      	adds	r3, #1
 800218e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002196:	e00f      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e58      	subs	r0, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	0099      	lsls	r1, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	6809      	ldr	r1, [r1, #0]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6911      	ldr	r1, [r2, #16]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68d2      	ldr	r2, [r2, #12]
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	000186a0 	.word	0x000186a0
 8002254:	001e847f 	.word	0x001e847f
 8002258:	003d08ff 	.word	0x003d08ff
 800225c:	431bde83 	.word	0x431bde83
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	461a      	mov	r2, r3
 8002272:	4603      	mov	r3, r0
 8002274:	817b      	strh	r3, [r7, #10]
 8002276:	460b      	mov	r3, r1
 8002278:	813b      	strh	r3, [r7, #8]
 800227a:	4613      	mov	r3, r2
 800227c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800227e:	f7ff fbe5 	bl	8001a4c <HAL_GetTick>
 8002282:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b20      	cmp	r3, #32
 800228e:	f040 80d9 	bne.w	8002444 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2319      	movs	r3, #25
 8002298:	2201      	movs	r2, #1
 800229a:	496d      	ldr	r1, [pc, #436]	; (8002450 <HAL_I2C_Mem_Write+0x1ec>)
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fcc1 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022a8:	2302      	movs	r3, #2
 80022aa:	e0cc      	b.n	8002446 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_I2C_Mem_Write+0x56>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e0c5      	b.n	8002446 <HAL_I2C_Mem_Write+0x1e2>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d007      	beq.n	80022e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2221      	movs	r2, #33	; 0x21
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2240      	movs	r2, #64	; 0x40
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a3a      	ldr	r2, [r7, #32]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4a4d      	ldr	r2, [pc, #308]	; (8002454 <HAL_I2C_Mem_Write+0x1f0>)
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002322:	88f8      	ldrh	r0, [r7, #6]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	8979      	ldrh	r1, [r7, #10]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	4603      	mov	r3, r0
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 faf8 	bl	8002928 <I2C_RequestMemoryWrite>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d052      	beq.n	80023e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e081      	b.n	8002446 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fd86 	bl	8002e58 <I2C_WaitOnTXEFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00d      	beq.n	800236e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b04      	cmp	r3, #4
 8002358:	d107      	bne.n	800236a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002368:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e06b      	b.n	8002446 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d11b      	bne.n	80023e4 <HAL_I2C_Mem_Write+0x180>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d017      	beq.n	80023e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1aa      	bne.n	8002342 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fd79 	bl	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00d      	beq.n	8002418 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	2b04      	cmp	r3, #4
 8002402:	d107      	bne.n	8002414 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002412:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e016      	b.n	8002446 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	e000      	b.n	8002446 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002444:	2302      	movs	r3, #2
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	00100002 	.word	0x00100002
 8002454:	ffff0000 	.word	0xffff0000

08002458 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08c      	sub	sp, #48	; 0x30
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	461a      	mov	r2, r3
 8002466:	4603      	mov	r3, r0
 8002468:	817b      	strh	r3, [r7, #10]
 800246a:	460b      	mov	r3, r1
 800246c:	813b      	strh	r3, [r7, #8]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002476:	f7ff fae9 	bl	8001a4c <HAL_GetTick>
 800247a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b20      	cmp	r3, #32
 8002486:	f040 8244 	bne.w	8002912 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2319      	movs	r3, #25
 8002490:	2201      	movs	r2, #1
 8002492:	4982      	ldr	r1, [pc, #520]	; (800269c <HAL_I2C_Mem_Read+0x244>)
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fbc5 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80024a0:	2302      	movs	r3, #2
 80024a2:	e237      	b.n	8002914 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_I2C_Mem_Read+0x5a>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e230      	b.n	8002914 <HAL_I2C_Mem_Read+0x4bc>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d007      	beq.n	80024d8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2222      	movs	r2, #34	; 0x22
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2240      	movs	r2, #64	; 0x40
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002502:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002508:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a62      	ldr	r2, [pc, #392]	; (80026a0 <HAL_I2C_Mem_Read+0x248>)
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800251a:	88f8      	ldrh	r0, [r7, #6]
 800251c:	893a      	ldrh	r2, [r7, #8]
 800251e:	8979      	ldrh	r1, [r7, #10]
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	4603      	mov	r3, r0
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fa92 	bl	8002a54 <I2C_RequestMemoryRead>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e1ec      	b.n	8002914 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253e:	2b00      	cmp	r3, #0
 8002540:	d113      	bne.n	800256a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e1c0      	b.n	80028ec <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256e:	2b01      	cmp	r3, #1
 8002570:	d11e      	bne.n	80025b0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002580:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002582:	b672      	cpsid	i
}
 8002584:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025ac:	b662      	cpsie	i
}
 80025ae:	e035      	b.n	800261c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d11e      	bne.n	80025f6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025c8:	b672      	cpsid	i
}
 80025ca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025f2:	b662      	cpsie	i
}
 80025f4:	e012      	b.n	800261c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002604:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800261c:	e166      	b.n	80028ec <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	2b03      	cmp	r3, #3
 8002624:	f200 811f 	bhi.w	8002866 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	2b01      	cmp	r3, #1
 800262e:	d123      	bne.n	8002678 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002632:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fc9f 	bl	8002f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e167      	b.n	8002914 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002676:	e139      	b.n	80028ec <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	2b02      	cmp	r3, #2
 800267e:	d152      	bne.n	8002726 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002686:	2200      	movs	r2, #0
 8002688:	4906      	ldr	r1, [pc, #24]	; (80026a4 <HAL_I2C_Mem_Read+0x24c>)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 faca 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e13c      	b.n	8002914 <HAL_I2C_Mem_Read+0x4bc>
 800269a:	bf00      	nop
 800269c:	00100002 	.word	0x00100002
 80026a0:	ffff0000 	.word	0xffff0000
 80026a4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026a8:	b672      	cpsid	i
}
 80026aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026ee:	b662      	cpsie	i
}
 80026f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002724:	e0e2      	b.n	80028ec <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	2200      	movs	r2, #0
 800272e:	497b      	ldr	r1, [pc, #492]	; (800291c <HAL_I2C_Mem_Read+0x4c4>)
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fa77 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0e9      	b.n	8002914 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
}
 8002752:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002786:	4b66      	ldr	r3, [pc, #408]	; (8002920 <HAL_I2C_Mem_Read+0x4c8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	08db      	lsrs	r3, r3, #3
 800278c:	4a65      	ldr	r2, [pc, #404]	; (8002924 <HAL_I2C_Mem_Read+0x4cc>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0a1a      	lsrs	r2, r3, #8
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	00da      	lsls	r2, r3, #3
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d118      	bne.n	80027de <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f043 0220 	orr.w	r2, r3, #32
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80027ce:	b662      	cpsie	i
}
 80027d0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e09a      	b.n	8002914 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d1d9      	bne.n	80027a0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800282e:	b662      	cpsie	i
}
 8002830:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002864:	e042      	b.n	80028ec <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002868:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fb84 	bl	8002f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e04c      	b.n	8002914 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d118      	bne.n	80028ec <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f47f ae94 	bne.w	800261e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	3728      	adds	r7, #40	; 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	00010004 	.word	0x00010004
 8002920:	20000000 	.word	0x20000000
 8002924:	14f8b589 	.word	0x14f8b589

08002928 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	460b      	mov	r3, r1
 800293c:	813b      	strh	r3, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	2200      	movs	r2, #0
 800295a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f960 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00d      	beq.n	8002986 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002978:	d103      	bne.n	8002982 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e05f      	b.n	8002a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002986:	897b      	ldrh	r3, [r7, #10]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002994:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	492d      	ldr	r1, [pc, #180]	; (8002a50 <I2C_RequestMemoryWrite+0x128>)
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f9bb 	bl	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e04c      	b.n	8002a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c4:	6a39      	ldr	r1, [r7, #32]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fa46 	bl	8002e58 <I2C_WaitOnTXEFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00d      	beq.n	80029ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d107      	bne.n	80029ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e02b      	b.n	8002a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d105      	bne.n	8002a00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f4:	893b      	ldrh	r3, [r7, #8]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	611a      	str	r2, [r3, #16]
 80029fe:	e021      	b.n	8002a44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a00:	893b      	ldrh	r3, [r7, #8]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a10:	6a39      	ldr	r1, [r7, #32]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fa20 	bl	8002e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00d      	beq.n	8002a3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d107      	bne.n	8002a36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e005      	b.n	8002a46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a3a:	893b      	ldrh	r3, [r7, #8]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	00010002 	.word	0x00010002

08002a54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	4608      	mov	r0, r1
 8002a5e:	4611      	mov	r1, r2
 8002a60:	461a      	mov	r2, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	817b      	strh	r3, [r7, #10]
 8002a66:	460b      	mov	r3, r1
 8002a68:	813b      	strh	r3, [r7, #8]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f8c2 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00d      	beq.n	8002ac2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab4:	d103      	bne.n	8002abe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e0aa      	b.n	8002c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ac2:	897b      	ldrh	r3, [r7, #10]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ad0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	6a3a      	ldr	r2, [r7, #32]
 8002ad6:	4952      	ldr	r1, [pc, #328]	; (8002c20 <I2C_RequestMemoryRead+0x1cc>)
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f91d 	bl	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e097      	b.n	8002c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b00:	6a39      	ldr	r1, [r7, #32]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f9a8 	bl	8002e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00d      	beq.n	8002b2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d107      	bne.n	8002b26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e076      	b.n	8002c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b30:	893b      	ldrh	r3, [r7, #8]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	611a      	str	r2, [r3, #16]
 8002b3a:	e021      	b.n	8002b80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b3c:	893b      	ldrh	r3, [r7, #8]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4c:	6a39      	ldr	r1, [r7, #32]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f982 	bl	8002e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00d      	beq.n	8002b76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d107      	bne.n	8002b72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e050      	b.n	8002c18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b82:	6a39      	ldr	r1, [r7, #32]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f967 	bl	8002e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00d      	beq.n	8002bac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d107      	bne.n	8002ba8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e035      	b.n	8002c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f82b 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be2:	d103      	bne.n	8002bec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e013      	b.n	8002c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bf0:	897b      	ldrh	r3, [r7, #10]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	6a3a      	ldr	r2, [r7, #32]
 8002c04:	4906      	ldr	r1, [pc, #24]	; (8002c20 <I2C_RequestMemoryRead+0x1cc>)
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f886 	bl	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	00010002 	.word	0x00010002

08002c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	4613      	mov	r3, r2
 8002c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c34:	e048      	b.n	8002cc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d044      	beq.n	8002cc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3e:	f7fe ff05 	bl	8001a4c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d139      	bne.n	8002cc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d10d      	bne.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	43da      	mvns	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	e00c      	b.n	8002c94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	43da      	mvns	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4013      	ands	r3, r2
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d116      	bne.n	8002cc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e023      	b.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	0c1b      	lsrs	r3, r3, #16
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d10d      	bne.n	8002cee <I2C_WaitOnFlagUntilTimeout+0xca>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	43da      	mvns	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	e00c      	b.n	8002d08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d093      	beq.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d26:	e071      	b.n	8002e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d36:	d123      	bne.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f043 0204 	orr.w	r2, r3, #4
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e067      	b.n	8002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d86:	d041      	beq.n	8002e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d88:	f7fe fe60 	bl	8001a4c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d302      	bcc.n	8002d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d136      	bne.n	8002e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d10c      	bne.n	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	43da      	mvns	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4013      	ands	r3, r2
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf14      	ite	ne
 8002dba:	2301      	movne	r3, #1
 8002dbc:	2300      	moveq	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	e00b      	b.n	8002dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	43da      	mvns	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bf14      	ite	ne
 8002dd4:	2301      	movne	r3, #1
 8002dd6:	2300      	moveq	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d016      	beq.n	8002e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f043 0220 	orr.w	r2, r3, #32
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e021      	b.n	8002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	0c1b      	lsrs	r3, r3, #16
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d10c      	bne.n	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4013      	ands	r3, r2
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf14      	ite	ne
 8002e28:	2301      	movne	r3, #1
 8002e2a:	2300      	moveq	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e00b      	b.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bf14      	ite	ne
 8002e42:	2301      	movne	r3, #1
 8002e44:	2300      	moveq	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f47f af6d 	bne.w	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e64:	e034      	b.n	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f8e3 	bl	8003032 <I2C_IsAcknowledgeFailed>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e034      	b.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d028      	beq.n	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7e:	f7fe fde5 	bl	8001a4c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11d      	bne.n	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	2b80      	cmp	r3, #128	; 0x80
 8002ea0:	d016      	beq.n	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e007      	b.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eda:	2b80      	cmp	r3, #128	; 0x80
 8002edc:	d1c3      	bne.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef4:	e034      	b.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f89b 	bl	8003032 <I2C_IsAcknowledgeFailed>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e034      	b.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d028      	beq.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7fe fd9d 	bl	8001a4c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d11d      	bne.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d016      	beq.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f043 0220 	orr.w	r2, r3, #32
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e007      	b.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d1c3      	bne.n	8002ef6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f84:	e049      	b.n	800301a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d119      	bne.n	8002fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0210 	mvn.w	r2, #16
 8002f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e030      	b.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc8:	f7fe fd40 	bl	8001a4c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d302      	bcc.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d11d      	bne.n	800301a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d016      	beq.n	800301a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e007      	b.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d1ae      	bne.n	8002f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003048:	d11b      	bne.n	8003082 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003052:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f043 0204 	orr.w	r2, r3, #4
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
	...

08003090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e272      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8087 	beq.w	80031be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b0:	4b92      	ldr	r3, [pc, #584]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d00c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030bc:	4b8f      	ldr	r3, [pc, #572]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d112      	bne.n	80030ee <HAL_RCC_OscConfig+0x5e>
 80030c8:	4b8c      	ldr	r3, [pc, #560]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d4:	d10b      	bne.n	80030ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d6:	4b89      	ldr	r3, [pc, #548]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d06c      	beq.n	80031bc <HAL_RCC_OscConfig+0x12c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d168      	bne.n	80031bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e24c      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x76>
 80030f8:	4b80      	ldr	r3, [pc, #512]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a7f      	ldr	r2, [pc, #508]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80030fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	e02e      	b.n	8003164 <HAL_RCC_OscConfig+0xd4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x98>
 800310e:	4b7b      	ldr	r3, [pc, #492]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a7a      	ldr	r2, [pc, #488]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b78      	ldr	r3, [pc, #480]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a77      	ldr	r2, [pc, #476]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e01d      	b.n	8003164 <HAL_RCC_OscConfig+0xd4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0xbc>
 8003132:	4b72      	ldr	r3, [pc, #456]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a71      	ldr	r2, [pc, #452]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b6f      	ldr	r3, [pc, #444]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6e      	ldr	r2, [pc, #440]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0xd4>
 800314c:	4b6b      	ldr	r3, [pc, #428]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a6a      	ldr	r2, [pc, #424]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4b68      	ldr	r3, [pc, #416]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a67      	ldr	r2, [pc, #412]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 800315e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003162:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe fc6e 	bl	8001a4c <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe fc6a 	bl	8001a4c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e200      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b5d      	ldr	r3, [pc, #372]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0xe4>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe fc5a 	bl	8001a4c <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800319c:	f7fe fc56 	bl	8001a4c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1ec      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x10c>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d063      	beq.n	8003292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ca:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031d6:	4b49      	ldr	r3, [pc, #292]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d11c      	bne.n	800321c <HAL_RCC_OscConfig+0x18c>
 80031e2:	4b46      	ldr	r3, [pc, #280]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d116      	bne.n	800321c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	4b43      	ldr	r3, [pc, #268]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x176>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e1c0      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4939      	ldr	r1, [pc, #228]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	e03a      	b.n	8003292 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fc0f 	bl	8001a4c <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003232:	f7fe fc0b 	bl	8001a4c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1a1      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4927      	ldr	r1, [pc, #156]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <HAL_RCC_OscConfig+0x270>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fbee 	bl	8001a4c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003274:	f7fe fbea 	bl	8001a4c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e180      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d03a      	beq.n	8003314 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d019      	beq.n	80032da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a6:	4b17      	ldr	r3, [pc, #92]	; (8003304 <HAL_RCC_OscConfig+0x274>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7fe fbce 	bl	8001a4c <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fe fbca 	bl	8001a4c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e160      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <HAL_RCC_OscConfig+0x26c>)
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032d2:	2001      	movs	r0, #1
 80032d4:	f000 faba 	bl	800384c <RCC_Delay>
 80032d8:	e01c      	b.n	8003314 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_RCC_OscConfig+0x274>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e0:	f7fe fbb4 	bl	8001a4c <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e6:	e00f      	b.n	8003308 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e8:	f7fe fbb0 	bl	8001a4c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d908      	bls.n	8003308 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e146      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	42420000 	.word	0x42420000
 8003304:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	4b92      	ldr	r3, [pc, #584]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e9      	bne.n	80032e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a6 	beq.w	800346e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b8b      	ldr	r3, [pc, #556]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	4b88      	ldr	r3, [pc, #544]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	4a87      	ldr	r2, [pc, #540]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333c:	61d3      	str	r3, [r2, #28]
 800333e:	4b85      	ldr	r3, [pc, #532]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334a:	2301      	movs	r3, #1
 800334c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334e:	4b82      	ldr	r3, [pc, #520]	; (8003558 <HAL_RCC_OscConfig+0x4c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d118      	bne.n	800338c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335a:	4b7f      	ldr	r3, [pc, #508]	; (8003558 <HAL_RCC_OscConfig+0x4c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a7e      	ldr	r2, [pc, #504]	; (8003558 <HAL_RCC_OscConfig+0x4c8>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003366:	f7fe fb71 	bl	8001a4c <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7fe fb6d 	bl	8001a4c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	; 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e103      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b75      	ldr	r3, [pc, #468]	; (8003558 <HAL_RCC_OscConfig+0x4c8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x312>
 8003394:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4a6e      	ldr	r2, [pc, #440]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6213      	str	r3, [r2, #32]
 80033a0:	e02d      	b.n	80033fe <HAL_RCC_OscConfig+0x36e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x334>
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a69      	ldr	r2, [pc, #420]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6213      	str	r3, [r2, #32]
 80033b6:	4b67      	ldr	r3, [pc, #412]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4a66      	ldr	r2, [pc, #408]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6213      	str	r3, [r2, #32]
 80033c2:	e01c      	b.n	80033fe <HAL_RCC_OscConfig+0x36e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x356>
 80033cc:	4b61      	ldr	r3, [pc, #388]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	4a60      	ldr	r2, [pc, #384]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	f043 0304 	orr.w	r3, r3, #4
 80033d6:	6213      	str	r3, [r2, #32]
 80033d8:	4b5e      	ldr	r3, [pc, #376]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a5d      	ldr	r2, [pc, #372]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	e00b      	b.n	80033fe <HAL_RCC_OscConfig+0x36e>
 80033e6:	4b5b      	ldr	r3, [pc, #364]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a5a      	ldr	r2, [pc, #360]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	6213      	str	r3, [r2, #32]
 80033f2:	4b58      	ldr	r3, [pc, #352]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a57      	ldr	r2, [pc, #348]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d015      	beq.n	8003432 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7fe fb21 	bl	8001a4c <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe fb1d 	bl	8001a4c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0b1      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	4b4b      	ldr	r3, [pc, #300]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ee      	beq.n	800340e <HAL_RCC_OscConfig+0x37e>
 8003430:	e014      	b.n	800345c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003432:	f7fe fb0b 	bl	8001a4c <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f7fe fb07 	bl	8001a4c <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f241 3288 	movw	r2, #5000	; 0x1388
 8003448:	4293      	cmp	r3, r2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e09b      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003450:	4b40      	ldr	r3, [pc, #256]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ee      	bne.n	800343a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4b3c      	ldr	r3, [pc, #240]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4a3b      	ldr	r2, [pc, #236]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8087 	beq.w	8003586 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003478:	4b36      	ldr	r3, [pc, #216]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d061      	beq.n	8003548 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d146      	bne.n	800351a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348c:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_RCC_OscConfig+0x4cc>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7fe fadb 	bl	8001a4c <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349a:	f7fe fad7 	bl	8001a4c <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e06d      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ac:	4b29      	ldr	r3, [pc, #164]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f0      	bne.n	800349a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c0:	d108      	bne.n	80034d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4921      	ldr	r1, [pc, #132]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034d4:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a19      	ldr	r1, [r3, #32]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	430b      	orrs	r3, r1
 80034e6:	491b      	ldr	r1, [pc, #108]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ec:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_RCC_OscConfig+0x4cc>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7fe faab 	bl	8001a4c <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fe faa7 	bl	8001a4c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e03d      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x46a>
 8003518:	e035      	b.n	8003586 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <HAL_RCC_OscConfig+0x4cc>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe fa94 	bl	8001a4c <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003528:	f7fe fa90 	bl	8001a4c <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e026      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x498>
 8003546:	e01e      	b.n	8003586 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e019      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
 8003554:	40021000 	.word	0x40021000
 8003558:	40007000 	.word	0x40007000
 800355c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCC_OscConfig+0x500>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	429a      	cmp	r2, r3
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d001      	beq.n	8003586 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0d0      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d910      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b67      	ldr	r3, [pc, #412]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 0207 	bic.w	r2, r3, #7
 80035be:	4965      	ldr	r1, [pc, #404]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b63      	ldr	r3, [pc, #396]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0b8      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f0:	4b59      	ldr	r3, [pc, #356]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4a58      	ldr	r2, [pc, #352]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003608:	4b53      	ldr	r3, [pc, #332]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4a52      	ldr	r2, [pc, #328]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003612:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b50      	ldr	r3, [pc, #320]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	494d      	ldr	r1, [pc, #308]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d040      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d115      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e07f      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e073      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b3d      	ldr	r3, [pc, #244]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003672:	4b39      	ldr	r3, [pc, #228]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4936      	ldr	r1, [pc, #216]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003684:	f7fe f9e2 	bl	8001a4c <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f7fe f9de 	bl	8001a4c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e053      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 020c 	and.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1eb      	bne.n	800368c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d210      	bcs.n	80036e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 0207 	bic.w	r2, r3, #7
 80036ca:	4922      	ldr	r1, [pc, #136]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e032      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4916      	ldr	r1, [pc, #88]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	490e      	ldr	r1, [pc, #56]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003722:	f000 f821 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003726:	4602      	mov	r2, r0
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	490a      	ldr	r1, [pc, #40]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003734:	5ccb      	ldrb	r3, [r1, r3]
 8003736:	fa22 f303 	lsr.w	r3, r2, r3
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCC_ClockConfig+0x1cc>)
 800373c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1d0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe f940 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40022000 	.word	0x40022000
 8003758:	40021000 	.word	0x40021000
 800375c:	080038f8 	.word	0x080038f8
 8003760:	20000000 	.word	0x20000000
 8003764:	20000004 	.word	0x20000004

08003768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003782:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <HAL_RCC_GetSysClockFreq+0x94>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b04      	cmp	r3, #4
 8003790:	d002      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x30>
 8003792:	2b08      	cmp	r3, #8
 8003794:	d003      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0x36>
 8003796:	e027      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003798:	4b19      	ldr	r3, [pc, #100]	; (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 800379a:	613b      	str	r3, [r7, #16]
      break;
 800379c:	e027      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	0c9b      	lsrs	r3, r3, #18
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	4a17      	ldr	r2, [pc, #92]	; (8003804 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037a8:	5cd3      	ldrb	r3, [r2, r3]
 80037aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d010      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_RCC_GetSysClockFreq+0x94>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	0c5b      	lsrs	r3, r3, #17
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	4a11      	ldr	r2, [pc, #68]	; (8003808 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037c2:	5cd3      	ldrb	r3, [r2, r3]
 80037c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a0d      	ldr	r2, [pc, #52]	; (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ca:	fb03 f202 	mul.w	r2, r3, r2
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e004      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a0c      	ldr	r2, [pc, #48]	; (800380c <HAL_RCC_GetSysClockFreq+0xa4>)
 80037dc:	fb02 f303 	mul.w	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	613b      	str	r3, [r7, #16]
      break;
 80037e6:	e002      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ea:	613b      	str	r3, [r7, #16]
      break;
 80037ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ee:	693b      	ldr	r3, [r7, #16]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
 8003800:	007a1200 	.word	0x007a1200
 8003804:	08003910 	.word	0x08003910
 8003808:	08003920 	.word	0x08003920
 800380c:	003d0900 	.word	0x003d0900

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b02      	ldr	r3, [pc, #8]	; (8003820 <HAL_RCC_GetHCLKFreq+0x10>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	20000000 	.word	0x20000000

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003828:	f7ff fff2 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	08003908 	.word	0x08003908

0800384c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <RCC_Delay+0x34>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <RCC_Delay+0x38>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	0a5b      	lsrs	r3, r3, #9
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003868:	bf00      	nop
  }
  while (Delay --);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1e5a      	subs	r2, r3, #1
 800386e:	60fa      	str	r2, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f9      	bne.n	8003868 <RCC_Delay+0x1c>
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	20000000 	.word	0x20000000
 8003884:	10624dd3 	.word	0x10624dd3

08003888 <memset>:
 8003888:	4603      	mov	r3, r0
 800388a:	4402      	add	r2, r0
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	f803 1b01 	strb.w	r1, [r3], #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <__libc_init_array>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	2600      	movs	r6, #0
 800389c:	4d0c      	ldr	r5, [pc, #48]	; (80038d0 <__libc_init_array+0x38>)
 800389e:	4c0d      	ldr	r4, [pc, #52]	; (80038d4 <__libc_init_array+0x3c>)
 80038a0:	1b64      	subs	r4, r4, r5
 80038a2:	10a4      	asrs	r4, r4, #2
 80038a4:	42a6      	cmp	r6, r4
 80038a6:	d109      	bne.n	80038bc <__libc_init_array+0x24>
 80038a8:	f000 f81a 	bl	80038e0 <_init>
 80038ac:	2600      	movs	r6, #0
 80038ae:	4d0a      	ldr	r5, [pc, #40]	; (80038d8 <__libc_init_array+0x40>)
 80038b0:	4c0a      	ldr	r4, [pc, #40]	; (80038dc <__libc_init_array+0x44>)
 80038b2:	1b64      	subs	r4, r4, r5
 80038b4:	10a4      	asrs	r4, r4, #2
 80038b6:	42a6      	cmp	r6, r4
 80038b8:	d105      	bne.n	80038c6 <__libc_init_array+0x2e>
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c0:	4798      	blx	r3
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7ee      	b.n	80038a4 <__libc_init_array+0xc>
 80038c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ca:	4798      	blx	r3
 80038cc:	3601      	adds	r6, #1
 80038ce:	e7f2      	b.n	80038b6 <__libc_init_array+0x1e>
 80038d0:	0800392c 	.word	0x0800392c
 80038d4:	0800392c 	.word	0x0800392c
 80038d8:	0800392c 	.word	0x0800392c
 80038dc:	08003930 	.word	0x08003930

080038e0 <_init>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr

080038ec <_fini>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr
