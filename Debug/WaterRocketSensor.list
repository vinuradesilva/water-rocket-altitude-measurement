
WaterRocketSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000415c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004294  08004294  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004294  08004294  00014294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800429c  0800429c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080042a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080042b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080042b0  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b896  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ae5  00000000  00000000  0002b90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  0002d3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009cd  00000000  00000000  0002e070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d1e  00000000  00000000  0002ea3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e260  00000000  00000000  0004575b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086e84  00000000  00000000  000539bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035dc  00000000  00000000  000da840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000dde1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004250 	.word	0x08004250

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004250 	.word	0x08004250

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_ldivmod>:
 8000608:	b97b      	cbnz	r3, 800062a <__aeabi_ldivmod+0x22>
 800060a:	b972      	cbnz	r2, 800062a <__aeabi_ldivmod+0x22>
 800060c:	2900      	cmp	r1, #0
 800060e:	bfbe      	ittt	lt
 8000610:	2000      	movlt	r0, #0
 8000612:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000616:	e006      	blt.n	8000626 <__aeabi_ldivmod+0x1e>
 8000618:	bf08      	it	eq
 800061a:	2800      	cmpeq	r0, #0
 800061c:	bf1c      	itt	ne
 800061e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000622:	f04f 30ff 	movne.w	r0, #4294967295
 8000626:	f000 b9a5 	b.w	8000974 <__aeabi_idiv0>
 800062a:	f1ad 0c08 	sub.w	ip, sp, #8
 800062e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000632:	2900      	cmp	r1, #0
 8000634:	db09      	blt.n	800064a <__aeabi_ldivmod+0x42>
 8000636:	2b00      	cmp	r3, #0
 8000638:	db1a      	blt.n	8000670 <__aeabi_ldivmod+0x68>
 800063a:	f000 f835 	bl	80006a8 <__udivmoddi4>
 800063e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000646:	b004      	add	sp, #16
 8000648:	4770      	bx	lr
 800064a:	4240      	negs	r0, r0
 800064c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	db1b      	blt.n	800068c <__aeabi_ldivmod+0x84>
 8000654:	f000 f828 	bl	80006a8 <__udivmoddi4>
 8000658:	f8dd e004 	ldr.w	lr, [sp, #4]
 800065c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000660:	b004      	add	sp, #16
 8000662:	4240      	negs	r0, r0
 8000664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000668:	4252      	negs	r2, r2
 800066a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800066e:	4770      	bx	lr
 8000670:	4252      	negs	r2, r2
 8000672:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000676:	f000 f817 	bl	80006a8 <__udivmoddi4>
 800067a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800067e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000682:	b004      	add	sp, #16
 8000684:	4240      	negs	r0, r0
 8000686:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800068a:	4770      	bx	lr
 800068c:	4252      	negs	r2, r2
 800068e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000692:	f000 f809 	bl	80006a8 <__udivmoddi4>
 8000696:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800069e:	b004      	add	sp, #16
 80006a0:	4252      	negs	r2, r2
 80006a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006a6:	4770      	bx	lr

080006a8 <__udivmoddi4>:
 80006a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ac:	9e08      	ldr	r6, [sp, #32]
 80006ae:	460d      	mov	r5, r1
 80006b0:	4604      	mov	r4, r0
 80006b2:	468e      	mov	lr, r1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d14c      	bne.n	8000752 <__udivmoddi4+0xaa>
 80006b8:	428a      	cmp	r2, r1
 80006ba:	4694      	mov	ip, r2
 80006bc:	d967      	bls.n	800078e <__udivmoddi4+0xe6>
 80006be:	fab2 f382 	clz	r3, r2
 80006c2:	b153      	cbz	r3, 80006da <__udivmoddi4+0x32>
 80006c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006c8:	f1c3 0220 	rsb	r2, r3, #32
 80006cc:	fa01 fe03 	lsl.w	lr, r1, r3
 80006d0:	fa20 f202 	lsr.w	r2, r0, r2
 80006d4:	ea42 0e0e 	orr.w	lr, r2, lr
 80006d8:	409c      	lsls	r4, r3
 80006da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006de:	fbbe f1f7 	udiv	r1, lr, r7
 80006e2:	fa1f f58c 	uxth.w	r5, ip
 80006e6:	fb07 ee11 	mls	lr, r7, r1, lr
 80006ea:	fb01 f005 	mul.w	r0, r1, r5
 80006ee:	0c22      	lsrs	r2, r4, #16
 80006f0:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80006f4:	4290      	cmp	r0, r2
 80006f6:	d90a      	bls.n	800070e <__udivmoddi4+0x66>
 80006f8:	eb1c 0202 	adds.w	r2, ip, r2
 80006fc:	f101 3eff 	add.w	lr, r1, #4294967295
 8000700:	f080 8119 	bcs.w	8000936 <__udivmoddi4+0x28e>
 8000704:	4290      	cmp	r0, r2
 8000706:	f240 8116 	bls.w	8000936 <__udivmoddi4+0x28e>
 800070a:	3902      	subs	r1, #2
 800070c:	4462      	add	r2, ip
 800070e:	1a12      	subs	r2, r2, r0
 8000710:	fbb2 f0f7 	udiv	r0, r2, r7
 8000714:	fb07 2210 	mls	r2, r7, r0, r2
 8000718:	fb00 f505 	mul.w	r5, r0, r5
 800071c:	b2a4      	uxth	r4, r4
 800071e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000722:	42a5      	cmp	r5, r4
 8000724:	d90a      	bls.n	800073c <__udivmoddi4+0x94>
 8000726:	eb1c 0404 	adds.w	r4, ip, r4
 800072a:	f100 32ff 	add.w	r2, r0, #4294967295
 800072e:	f080 8104 	bcs.w	800093a <__udivmoddi4+0x292>
 8000732:	42a5      	cmp	r5, r4
 8000734:	f240 8101 	bls.w	800093a <__udivmoddi4+0x292>
 8000738:	4464      	add	r4, ip
 800073a:	3802      	subs	r0, #2
 800073c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000740:	2100      	movs	r1, #0
 8000742:	1b64      	subs	r4, r4, r5
 8000744:	b11e      	cbz	r6, 800074e <__udivmoddi4+0xa6>
 8000746:	40dc      	lsrs	r4, r3
 8000748:	2300      	movs	r3, #0
 800074a:	e9c6 4300 	strd	r4, r3, [r6]
 800074e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000752:	428b      	cmp	r3, r1
 8000754:	d908      	bls.n	8000768 <__udivmoddi4+0xc0>
 8000756:	2e00      	cmp	r6, #0
 8000758:	f000 80ea 	beq.w	8000930 <__udivmoddi4+0x288>
 800075c:	2100      	movs	r1, #0
 800075e:	e9c6 0500 	strd	r0, r5, [r6]
 8000762:	4608      	mov	r0, r1
 8000764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000768:	fab3 f183 	clz	r1, r3
 800076c:	2900      	cmp	r1, #0
 800076e:	d148      	bne.n	8000802 <__udivmoddi4+0x15a>
 8000770:	42ab      	cmp	r3, r5
 8000772:	d302      	bcc.n	800077a <__udivmoddi4+0xd2>
 8000774:	4282      	cmp	r2, r0
 8000776:	f200 80f8 	bhi.w	800096a <__udivmoddi4+0x2c2>
 800077a:	1a84      	subs	r4, r0, r2
 800077c:	eb65 0203 	sbc.w	r2, r5, r3
 8000780:	2001      	movs	r0, #1
 8000782:	4696      	mov	lr, r2
 8000784:	2e00      	cmp	r6, #0
 8000786:	d0e2      	beq.n	800074e <__udivmoddi4+0xa6>
 8000788:	e9c6 4e00 	strd	r4, lr, [r6]
 800078c:	e7df      	b.n	800074e <__udivmoddi4+0xa6>
 800078e:	b902      	cbnz	r2, 8000792 <__udivmoddi4+0xea>
 8000790:	deff      	udf	#255	; 0xff
 8000792:	fab2 f382 	clz	r3, r2
 8000796:	2b00      	cmp	r3, #0
 8000798:	f040 808e 	bne.w	80008b8 <__udivmoddi4+0x210>
 800079c:	1a88      	subs	r0, r1, r2
 800079e:	2101      	movs	r1, #1
 80007a0:	0c17      	lsrs	r7, r2, #16
 80007a2:	fa1f fe82 	uxth.w	lr, r2
 80007a6:	fbb0 f5f7 	udiv	r5, r0, r7
 80007aa:	fb07 0015 	mls	r0, r7, r5, r0
 80007ae:	0c22      	lsrs	r2, r4, #16
 80007b0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007b4:	fb0e f005 	mul.w	r0, lr, r5
 80007b8:	4290      	cmp	r0, r2
 80007ba:	d908      	bls.n	80007ce <__udivmoddi4+0x126>
 80007bc:	eb1c 0202 	adds.w	r2, ip, r2
 80007c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80007c4:	d202      	bcs.n	80007cc <__udivmoddi4+0x124>
 80007c6:	4290      	cmp	r0, r2
 80007c8:	f200 80cc 	bhi.w	8000964 <__udivmoddi4+0x2bc>
 80007cc:	4645      	mov	r5, r8
 80007ce:	1a12      	subs	r2, r2, r0
 80007d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80007d4:	fb07 2210 	mls	r2, r7, r0, r2
 80007d8:	fb0e fe00 	mul.w	lr, lr, r0
 80007dc:	b2a4      	uxth	r4, r4
 80007de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007e2:	45a6      	cmp	lr, r4
 80007e4:	d908      	bls.n	80007f8 <__udivmoddi4+0x150>
 80007e6:	eb1c 0404 	adds.w	r4, ip, r4
 80007ea:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ee:	d202      	bcs.n	80007f6 <__udivmoddi4+0x14e>
 80007f0:	45a6      	cmp	lr, r4
 80007f2:	f200 80b4 	bhi.w	800095e <__udivmoddi4+0x2b6>
 80007f6:	4610      	mov	r0, r2
 80007f8:	eba4 040e 	sub.w	r4, r4, lr
 80007fc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000800:	e7a0      	b.n	8000744 <__udivmoddi4+0x9c>
 8000802:	f1c1 0720 	rsb	r7, r1, #32
 8000806:	408b      	lsls	r3, r1
 8000808:	fa22 fc07 	lsr.w	ip, r2, r7
 800080c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000810:	fa25 fa07 	lsr.w	sl, r5, r7
 8000814:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000818:	fbba f8f9 	udiv	r8, sl, r9
 800081c:	408d      	lsls	r5, r1
 800081e:	fa20 f307 	lsr.w	r3, r0, r7
 8000822:	fb09 aa18 	mls	sl, r9, r8, sl
 8000826:	fa1f fe8c 	uxth.w	lr, ip
 800082a:	432b      	orrs	r3, r5
 800082c:	fa00 f501 	lsl.w	r5, r0, r1
 8000830:	fb08 f00e 	mul.w	r0, r8, lr
 8000834:	0c1c      	lsrs	r4, r3, #16
 8000836:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800083a:	42a0      	cmp	r0, r4
 800083c:	fa02 f201 	lsl.w	r2, r2, r1
 8000840:	d90b      	bls.n	800085a <__udivmoddi4+0x1b2>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f108 3aff 	add.w	sl, r8, #4294967295
 800084a:	f080 8086 	bcs.w	800095a <__udivmoddi4+0x2b2>
 800084e:	42a0      	cmp	r0, r4
 8000850:	f240 8083 	bls.w	800095a <__udivmoddi4+0x2b2>
 8000854:	f1a8 0802 	sub.w	r8, r8, #2
 8000858:	4464      	add	r4, ip
 800085a:	1a24      	subs	r4, r4, r0
 800085c:	b298      	uxth	r0, r3
 800085e:	fbb4 f3f9 	udiv	r3, r4, r9
 8000862:	fb09 4413 	mls	r4, r9, r3, r4
 8000866:	fb03 fe0e 	mul.w	lr, r3, lr
 800086a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800086e:	45a6      	cmp	lr, r4
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0x1dc>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f103 30ff 	add.w	r0, r3, #4294967295
 800087a:	d26a      	bcs.n	8000952 <__udivmoddi4+0x2aa>
 800087c:	45a6      	cmp	lr, r4
 800087e:	d968      	bls.n	8000952 <__udivmoddi4+0x2aa>
 8000880:	3b02      	subs	r3, #2
 8000882:	4464      	add	r4, ip
 8000884:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000888:	fba0 9302 	umull	r9, r3, r0, r2
 800088c:	eba4 040e 	sub.w	r4, r4, lr
 8000890:	429c      	cmp	r4, r3
 8000892:	46c8      	mov	r8, r9
 8000894:	469e      	mov	lr, r3
 8000896:	d354      	bcc.n	8000942 <__udivmoddi4+0x29a>
 8000898:	d051      	beq.n	800093e <__udivmoddi4+0x296>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d067      	beq.n	800096e <__udivmoddi4+0x2c6>
 800089e:	ebb5 0308 	subs.w	r3, r5, r8
 80008a2:	eb64 040e 	sbc.w	r4, r4, lr
 80008a6:	40cb      	lsrs	r3, r1
 80008a8:	fa04 f707 	lsl.w	r7, r4, r7
 80008ac:	431f      	orrs	r7, r3
 80008ae:	40cc      	lsrs	r4, r1
 80008b0:	e9c6 7400 	strd	r7, r4, [r6]
 80008b4:	2100      	movs	r1, #0
 80008b6:	e74a      	b.n	800074e <__udivmoddi4+0xa6>
 80008b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008bc:	f1c3 0020 	rsb	r0, r3, #32
 80008c0:	40c1      	lsrs	r1, r0
 80008c2:	409d      	lsls	r5, r3
 80008c4:	fa24 f000 	lsr.w	r0, r4, r0
 80008c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008cc:	4328      	orrs	r0, r5
 80008ce:	fbb1 f5f7 	udiv	r5, r1, r7
 80008d2:	fb07 1115 	mls	r1, r7, r5, r1
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	0c02      	lsrs	r2, r0, #16
 80008dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008e0:	fb05 f10e 	mul.w	r1, r5, lr
 80008e4:	4291      	cmp	r1, r2
 80008e6:	fa04 f403 	lsl.w	r4, r4, r3
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x256>
 80008ec:	eb1c 0202 	adds.w	r2, ip, r2
 80008f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f4:	d22f      	bcs.n	8000956 <__udivmoddi4+0x2ae>
 80008f6:	4291      	cmp	r1, r2
 80008f8:	d92d      	bls.n	8000956 <__udivmoddi4+0x2ae>
 80008fa:	3d02      	subs	r5, #2
 80008fc:	4462      	add	r2, ip
 80008fe:	1a52      	subs	r2, r2, r1
 8000900:	fbb2 f1f7 	udiv	r1, r2, r7
 8000904:	fb07 2211 	mls	r2, r7, r1, r2
 8000908:	b280      	uxth	r0, r0
 800090a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800090e:	fb01 f20e 	mul.w	r2, r1, lr
 8000912:	4282      	cmp	r2, r0
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x280>
 8000916:	eb1c 0000 	adds.w	r0, ip, r0
 800091a:	f101 38ff 	add.w	r8, r1, #4294967295
 800091e:	d216      	bcs.n	800094e <__udivmoddi4+0x2a6>
 8000920:	4282      	cmp	r2, r0
 8000922:	d914      	bls.n	800094e <__udivmoddi4+0x2a6>
 8000924:	3902      	subs	r1, #2
 8000926:	4460      	add	r0, ip
 8000928:	1a80      	subs	r0, r0, r2
 800092a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800092e:	e73a      	b.n	80007a6 <__udivmoddi4+0xfe>
 8000930:	4631      	mov	r1, r6
 8000932:	4630      	mov	r0, r6
 8000934:	e70b      	b.n	800074e <__udivmoddi4+0xa6>
 8000936:	4671      	mov	r1, lr
 8000938:	e6e9      	b.n	800070e <__udivmoddi4+0x66>
 800093a:	4610      	mov	r0, r2
 800093c:	e6fe      	b.n	800073c <__udivmoddi4+0x94>
 800093e:	454d      	cmp	r5, r9
 8000940:	d2ab      	bcs.n	800089a <__udivmoddi4+0x1f2>
 8000942:	ebb9 0802 	subs.w	r8, r9, r2
 8000946:	eb63 0e0c 	sbc.w	lr, r3, ip
 800094a:	3801      	subs	r0, #1
 800094c:	e7a5      	b.n	800089a <__udivmoddi4+0x1f2>
 800094e:	4641      	mov	r1, r8
 8000950:	e7ea      	b.n	8000928 <__udivmoddi4+0x280>
 8000952:	4603      	mov	r3, r0
 8000954:	e796      	b.n	8000884 <__udivmoddi4+0x1dc>
 8000956:	4645      	mov	r5, r8
 8000958:	e7d1      	b.n	80008fe <__udivmoddi4+0x256>
 800095a:	46d0      	mov	r8, sl
 800095c:	e77d      	b.n	800085a <__udivmoddi4+0x1b2>
 800095e:	4464      	add	r4, ip
 8000960:	3802      	subs	r0, #2
 8000962:	e749      	b.n	80007f8 <__udivmoddi4+0x150>
 8000964:	3d02      	subs	r5, #2
 8000966:	4462      	add	r2, ip
 8000968:	e731      	b.n	80007ce <__udivmoddi4+0x126>
 800096a:	4608      	mov	r0, r1
 800096c:	e70a      	b.n	8000784 <__udivmoddi4+0xdc>
 800096e:	4631      	mov	r1, r6
 8000970:	e6ed      	b.n	800074e <__udivmoddi4+0xa6>
 8000972:	bf00      	nop

08000974 <__aeabi_idiv0>:
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2203      	movs	r2, #3
 8000984:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2203      	movs	r2, #3
 8000990:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2203      	movs	r2, #3
 8000996:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2203      	movs	r2, #3
 800099c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2203      	movs	r2, #3
 80009a2:	715a      	strb	r2, [r3, #5]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b08a      	sub	sp, #40	; 0x28
 80009b2:	af04      	add	r7, sp, #16
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	460b      	mov	r3, r1
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80009c8:	7afb      	ldrb	r3, [r7, #11]
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	8af9      	ldrh	r1, [r7, #22]
 80009ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80009d2:	9302      	str	r3, [sp, #8]
 80009d4:	2302      	movs	r3, #2
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2301      	movs	r3, #1
 80009e0:	f001 fdf4 	bl	80025cc <HAL_I2C_Mem_Read>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10b      	bne.n	8000a02 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80009ea:	7d7b      	ldrb	r3, [r7, #21]
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	7d3b      	ldrb	r3, [r7, #20]
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b21b      	sxth	r3, r3
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	801a      	strh	r2, [r3, #0]
		return true;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <read_register16+0x56>
	} else
		return false;
 8000a02:	2300      	movs	r3, #0

}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af04      	add	r7, sp, #16
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	461a      	mov	r2, r3
 8000a18:	460b      	mov	r3, r1
 8000a1a:	72fb      	strb	r3, [r7, #11]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a2c:	7afb      	ldrb	r3, [r7, #11]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	7abb      	ldrb	r3, [r7, #10]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	8af9      	ldrh	r1, [r7, #22]
 8000a36:	f241 3488 	movw	r4, #5000	; 0x1388
 8000a3a:	9402      	str	r4, [sp, #8]
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	f001 fdc2 	bl	80025cc <HAL_I2C_Mem_Read>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <read_data+0x46>
		return 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e000      	b.n	8000a54 <read_data+0x48>
	else
		return 1;
 8000a52:	2301      	movs	r3, #1

}
 8000a54:	4618      	mov	r0, r3
 8000a56:	371c      	adds	r7, #28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd90      	pop	{r4, r7, pc}

08000a5c <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	461a      	mov	r2, r3
 8000a68:	2188      	movs	r1, #136	; 0x88
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ff9f 	bl	80009ae <read_register16>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d06f      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3302      	adds	r3, #2
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	218a      	movs	r1, #138	; 0x8a
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ff95 	bl	80009ae <read_register16>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d065      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	461a      	mov	r2, r3
 8000a90:	218c      	movs	r1, #140	; 0x8c
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ff8b 	bl	80009ae <read_register16>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d05b      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3306      	adds	r3, #6
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	218e      	movs	r1, #142	; 0x8e
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ff81 	bl	80009ae <read_register16>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d051      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2190      	movs	r1, #144	; 0x90
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ff77 	bl	80009ae <read_register16>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d047      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	330a      	adds	r3, #10
 8000aca:	461a      	mov	r2, r3
 8000acc:	2192      	movs	r1, #146	; 0x92
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ff6d 	bl	80009ae <read_register16>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d03d      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	330c      	adds	r3, #12
 8000ade:	461a      	mov	r2, r3
 8000ae0:	2194      	movs	r1, #148	; 0x94
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ff63 	bl	80009ae <read_register16>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d033      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	330e      	adds	r3, #14
 8000af2:	461a      	mov	r2, r3
 8000af4:	2196      	movs	r1, #150	; 0x96
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ff59 	bl	80009ae <read_register16>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d029      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3310      	adds	r3, #16
 8000b06:	461a      	mov	r2, r3
 8000b08:	2198      	movs	r1, #152	; 0x98
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ff4f 	bl	80009ae <read_register16>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d01f      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3312      	adds	r3, #18
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	219a      	movs	r1, #154	; 0x9a
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff45 	bl	80009ae <read_register16>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d015      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3314      	adds	r3, #20
 8000b2e:	461a      	mov	r2, r3
 8000b30:	219c      	movs	r1, #156	; 0x9c
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ff3b 	bl	80009ae <read_register16>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00b      	beq.n	8000b56 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000b42:	461a      	mov	r2, r3
 8000b44:	219e      	movs	r1, #158	; 0x9e
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff31 	bl	80009ae <read_register16>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <read_calibration_data+0xfa>

		return true;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <read_calibration_data+0xfc>
	}

	return false;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f103 0218 	add.w	r2, r3, #24
 8000b6e:	2301      	movs	r3, #1
 8000b70:	21a1      	movs	r1, #161	; 0xa1
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ff4a 	bl	8000a0c <read_data>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	331a      	adds	r3, #26
 8000b82:	461a      	mov	r2, r3
 8000b84:	21e1      	movs	r1, #225	; 0xe1
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff11 	bl	80009ae <read_register16>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d041      	beq.n	8000c16 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f103 021c 	add.w	r2, r3, #28
 8000b98:	2301      	movs	r3, #1
 8000b9a:	21e3      	movs	r1, #227	; 0xe3
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff35 	bl	8000a0c <read_data>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d136      	bne.n	8000c16 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000ba8:	f107 030e 	add.w	r3, r7, #14
 8000bac:	461a      	mov	r2, r3
 8000bae:	21e4      	movs	r1, #228	; 0xe4
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fefc 	bl	80009ae <read_register16>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d02c      	beq.n	8000c16 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	21e5      	movs	r1, #229	; 0xe5
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fef2 	bl	80009ae <read_register16>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d022      	beq.n	8000c16 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	21e7      	movs	r1, #231	; 0xe7
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff16 	bl	8000a0c <read_data>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d117      	bne.n	8000c16 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000be6:	89fb      	ldrh	r3, [r7, #14]
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	89fb      	ldrh	r3, [r7, #14]
 8000bf4:	121b      	asrs	r3, r3, #8
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	f003 030f 	and.w	r3, r3, #15
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000c06:	89bb      	ldrh	r3, [r7, #12]
 8000c08:	091b      	lsrs	r3, r3, #4
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	841a      	strh	r2, [r3, #32]

		return true;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <read_hum_calibration_data+0xb8>
	}

	return false;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af04      	add	r7, sp, #16
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	89f9      	ldrh	r1, [r7, #14]
 8000c42:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c46:	9302      	str	r3, [sp, #8]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	1cbb      	adds	r3, r7, #2
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2301      	movs	r3, #1
 8000c52:	f001 fbc1 	bl	80023d8 <HAL_I2C_Mem_Write>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <write_register8+0x40>
		return false;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e000      	b.n	8000c62 <write_register8+0x42>
	else
		return true;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c78:	2b76      	cmp	r3, #118	; 0x76
 8000c7a:	d005      	beq.n	8000c88 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c80:	2b77      	cmp	r3, #119	; 0x77
 8000c82:	d001      	beq.n	8000c88 <bmp280_init+0x1e>

		return false;
 8000c84:	2300      	movs	r3, #0
 8000c86:	e099      	b.n	8000dbc <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000c8e:	2301      	movs	r3, #1
 8000c90:	21d0      	movs	r1, #208	; 0xd0
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff feba 	bl	8000a0c <read_data>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <bmp280_init+0x38>
		return false;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e08c      	b.n	8000dbc <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000ca8:	2b58      	cmp	r3, #88	; 0x58
 8000caa:	d006      	beq.n	8000cba <bmp280_init+0x50>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000cb2:	2b60      	cmp	r3, #96	; 0x60
 8000cb4:	d001      	beq.n	8000cba <bmp280_init+0x50>

		return false;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e080      	b.n	8000dbc <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000cba:	22b6      	movs	r2, #182	; 0xb6
 8000cbc:	21e0      	movs	r1, #224	; 0xe0
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffae 	bl	8000c20 <write_register8>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <bmp280_init+0x64>
		return false;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e076      	b.n	8000dbc <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000cce:	f107 020c 	add.w	r2, r7, #12
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	21f3      	movs	r1, #243	; 0xf3
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fe98 	bl	8000a0c <read_data>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f5      	bne.n	8000cce <bmp280_init+0x64>
				&& (status & 1) == 0)
 8000ce2:	7b3b      	ldrb	r3, [r7, #12]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1f0      	bne.n	8000cce <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff feb5 	bl	8000a5c <read_calibration_data>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f083 0301 	eor.w	r3, r3, #1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d100      	bne.n	8000d00 <bmp280_init+0x96>
 8000cfe:	e001      	b.n	8000d04 <bmp280_init+0x9a>
		return false;
 8000d00:	2300      	movs	r3, #0
 8000d02:	e05b      	b.n	8000dbc <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000d0a:	2b60      	cmp	r3, #96	; 0x60
 8000d0c:	d10a      	bne.n	8000d24 <bmp280_init+0xba>
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ff26 	bl	8000b60 <read_hum_calibration_data>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f083 0301 	eor.w	r3, r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <bmp280_init+0xba>
		return false;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e04b      	b.n	8000dbc <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	795b      	ldrb	r3, [r3, #5]
 8000d28:	015b      	lsls	r3, r3, #5
 8000d2a:	b25a      	sxtb	r2, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	785b      	ldrb	r3, [r3, #1]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	b25b      	sxtb	r3, r3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	21f5      	movs	r1, #245	; 0xf5
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff6d 	bl	8000c20 <write_register8>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <bmp280_init+0xe6>
		return false;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e035      	b.n	8000dbc <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d102      	bne.n	8000d5e <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	78db      	ldrb	r3, [r3, #3]
 8000d62:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000d64:	b25a      	sxtb	r2, r3
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	789b      	ldrb	r3, [r3, #2]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b25a      	sxtb	r2, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000d7c:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000d84:	2b60      	cmp	r3, #96	; 0x60
 8000d86:	d10d      	bne.n	8000da4 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000d8e:	7b7b      	ldrb	r3, [r7, #13]
 8000d90:	461a      	mov	r2, r3
 8000d92:	21f2      	movs	r1, #242	; 0xf2
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff43 	bl	8000c20 <write_register8>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <bmp280_init+0x13a>
			return false;
 8000da0:	2300      	movs	r3, #0
 8000da2:	e00b      	b.n	8000dbc <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000da4:	7bbb      	ldrb	r3, [r7, #14]
 8000da6:	461a      	mov	r2, r3
 8000da8:	21f4      	movs	r1, #244	; 0xf4
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ff38 	bl	8000c20 <write_register8>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <bmp280_init+0x150>
		return false;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <bmp280_init+0x152>
	}

	return true;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	10da      	asrs	r2, r3, #3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000de6:	12db      	asrs	r3, r3, #11
 8000de8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	111b      	asrs	r3, r3, #4
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	8812      	ldrh	r2, [r2, #0]
 8000df2:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	1112      	asrs	r2, r2, #4
 8000df8:	68f9      	ldr	r1, [r7, #12]
 8000dfa:	8809      	ldrh	r1, [r1, #0]
 8000dfc:	1a52      	subs	r2, r2, r1
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000e0e:	139b      	asrs	r3, r3, #14
 8000e10:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	441a      	add	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	3380      	adds	r3, #128	; 0x80
 8000e28:	121b      	asrs	r3, r3, #8
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	371c      	adds	r7, #28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e38:	b0cc      	sub	sp, #304	; 0x130
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000e40:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8000e44:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e4c:	17da      	asrs	r2, r3, #31
 8000e4e:	461c      	mov	r4, r3
 8000e50:	4615      	mov	r5, r2
 8000e52:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8000e56:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000e5a:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000e5e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000e66:	fb03 f102 	mul.w	r1, r3, r2
 8000e6a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	18ca      	adds	r2, r1, r3
 8000e78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000e7c:	fba3 8903 	umull	r8, r9, r3, r3
 8000e80:	eb02 0309 	add.w	r3, r2, r9
 8000e84:	4699      	mov	r9, r3
 8000e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e8a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	17da      	asrs	r2, r3, #31
 8000e92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000e96:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000e9a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	fb03 f209 	mul.w	r2, r3, r9
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	fb08 f303 	mul.w	r3, r8, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	4602      	mov	r2, r0
 8000eae:	fba8 2102 	umull	r2, r1, r8, r2
 8000eb2:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8000eb6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8000eba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000ec4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8000ec8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8000ecc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ed4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	17da      	asrs	r2, r3, #31
 8000edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000ee0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ee8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000eec:	462a      	mov	r2, r5
 8000eee:	fb02 f203 	mul.w	r2, r2, r3
 8000ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ef6:	4621      	mov	r1, r4
 8000ef8:	fb01 f303 	mul.w	r3, r1, r3
 8000efc:	441a      	add	r2, r3
 8000efe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f02:	4621      	mov	r1, r4
 8000f04:	fba3 3101 	umull	r3, r1, r3, r1
 8000f08:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8000f0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f14:	18d3      	adds	r3, r2, r3
 8000f16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	f04f 0100 	mov.w	r1, #0
 8000f22:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000f26:	462b      	mov	r3, r5
 8000f28:	0459      	lsls	r1, r3, #17
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8000f30:	4623      	mov	r3, r4
 8000f32:	0458      	lsls	r0, r3, #17
 8000f34:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000f38:	1814      	adds	r4, r2, r0
 8000f3a:	643c      	str	r4, [r7, #64]	; 0x40
 8000f3c:	414b      	adcs	r3, r1
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8000f40:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000f44:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	17da      	asrs	r2, r3, #31
 8000f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000f58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000f5c:	f04f 0000 	mov.w	r0, #0
 8000f60:	f04f 0100 	mov.w	r1, #0
 8000f64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f68:	00d9      	lsls	r1, r3, #3
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000f70:	1814      	adds	r4, r2, r0
 8000f72:	63bc      	str	r4, [r7, #56]	; 0x38
 8000f74:	414b      	adcs	r3, r1
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f78:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000f7c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000f80:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f88:	fb03 f102 	mul.w	r1, r3, r2
 8000f8c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	18ca      	adds	r2, r1, r3
 8000f9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f9e:	fba3 3103 	umull	r3, r1, r3, r3
 8000fa2:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8000fa6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000fae:	18d3      	adds	r3, r2, r3
 8000fb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000fb8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	17da      	asrs	r2, r3, #31
 8000fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000fc4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000fc8:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8000fcc:	4622      	mov	r2, r4
 8000fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	fb01 f202 	mul.w	r2, r1, r2
 8000fd8:	464d      	mov	r5, r9
 8000fda:	4618      	mov	r0, r3
 8000fdc:	4621      	mov	r1, r4
 8000fde:	4603      	mov	r3, r0
 8000fe0:	fb03 f305 	mul.w	r3, r3, r5
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	4641      	mov	r1, r8
 8000fea:	fba2 2101 	umull	r2, r1, r2, r1
 8000fee:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8000ff2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8000ff6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001000:	f04f 0000 	mov.w	r0, #0
 8001004:	f04f 0100 	mov.w	r1, #0
 8001008:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800100c:	4623      	mov	r3, r4
 800100e:	0a18      	lsrs	r0, r3, #8
 8001010:	462a      	mov	r2, r5
 8001012:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001016:	462b      	mov	r3, r5
 8001018:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800101a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800101e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001022:	b21b      	sxth	r3, r3
 8001024:	17da      	asrs	r2, r3, #31
 8001026:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800102a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800102e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001032:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001036:	464a      	mov	r2, r9
 8001038:	fb02 f203 	mul.w	r2, r2, r3
 800103c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001040:	4644      	mov	r4, r8
 8001042:	fb04 f303 	mul.w	r3, r4, r3
 8001046:	441a      	add	r2, r3
 8001048:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800104c:	4644      	mov	r4, r8
 800104e:	fba3 3404 	umull	r3, r4, r3, r4
 8001052:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001056:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800105a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800105e:	18d3      	adds	r3, r2, r3
 8001060:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001070:	464c      	mov	r4, r9
 8001072:	0323      	lsls	r3, r4, #12
 8001074:	46c4      	mov	ip, r8
 8001076:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 800107a:	4644      	mov	r4, r8
 800107c:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800107e:	1884      	adds	r4, r0, r2
 8001080:	633c      	str	r4, [r7, #48]	; 0x30
 8001082:	eb41 0303 	adc.w	r3, r1, r3
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
 8001088:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800108c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001090:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001094:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001098:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800109c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80010a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010a4:	88db      	ldrh	r3, [r3, #6]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80010ae:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80010b2:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80010b6:	4622      	mov	r2, r4
 80010b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80010bc:	4641      	mov	r1, r8
 80010be:	fb01 f202 	mul.w	r2, r1, r2
 80010c2:	464d      	mov	r5, r9
 80010c4:	4618      	mov	r0, r3
 80010c6:	4621      	mov	r1, r4
 80010c8:	4603      	mov	r3, r0
 80010ca:	fb03 f305 	mul.w	r3, r3, r5
 80010ce:	4413      	add	r3, r2
 80010d0:	4602      	mov	r2, r0
 80010d2:	4641      	mov	r1, r8
 80010d4:	fba2 2101 	umull	r2, r1, r2, r1
 80010d8:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80010dc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80010e0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80010e4:	4413      	add	r3, r2
 80010e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80010f6:	4629      	mov	r1, r5
 80010f8:	104a      	asrs	r2, r1, #1
 80010fa:	4629      	mov	r1, r5
 80010fc:	17cb      	asrs	r3, r1, #31
 80010fe:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001102:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001106:	4313      	orrs	r3, r2
 8001108:	d101      	bne.n	800110e <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 800110a:	2300      	movs	r3, #0
 800110c:	e146      	b.n	800139c <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 800110e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001112:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001116:	17da      	asrs	r2, r3, #31
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
 800111a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800111c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001120:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001124:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001128:	105b      	asrs	r3, r3, #1
 800112a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800112e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001132:	07db      	lsls	r3, r3, #31
 8001134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001138:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800113c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001140:	4604      	mov	r4, r0
 8001142:	1aa4      	subs	r4, r4, r2
 8001144:	67bc      	str	r4, [r7, #120]	; 0x78
 8001146:	eb61 0303 	sbc.w	r3, r1, r3
 800114a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800114c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001150:	4622      	mov	r2, r4
 8001152:	462b      	mov	r3, r5
 8001154:	1891      	adds	r1, r2, r2
 8001156:	6239      	str	r1, [r7, #32]
 8001158:	415b      	adcs	r3, r3
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
 800115c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001160:	4621      	mov	r1, r4
 8001162:	1851      	adds	r1, r2, r1
 8001164:	61b9      	str	r1, [r7, #24]
 8001166:	4629      	mov	r1, r5
 8001168:	414b      	adcs	r3, r1
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001178:	4649      	mov	r1, r9
 800117a:	018b      	lsls	r3, r1, #6
 800117c:	4641      	mov	r1, r8
 800117e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001182:	4641      	mov	r1, r8
 8001184:	018a      	lsls	r2, r1, #6
 8001186:	4641      	mov	r1, r8
 8001188:	1889      	adds	r1, r1, r2
 800118a:	6139      	str	r1, [r7, #16]
 800118c:	4649      	mov	r1, r9
 800118e:	eb43 0101 	adc.w	r1, r3, r1
 8001192:	6179      	str	r1, [r7, #20]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011a0:	4649      	mov	r1, r9
 80011a2:	008b      	lsls	r3, r1, #2
 80011a4:	46c4      	mov	ip, r8
 80011a6:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80011aa:	4641      	mov	r1, r8
 80011ac:	008a      	lsls	r2, r1, #2
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	4622      	mov	r2, r4
 80011b6:	189b      	adds	r3, r3, r2
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	460b      	mov	r3, r1
 80011bc:	462a      	mov	r2, r5
 80011be:	eb42 0303 	adc.w	r3, r2, r3
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80011d0:	4649      	mov	r1, r9
 80011d2:	008b      	lsls	r3, r1, #2
 80011d4:	46c4      	mov	ip, r8
 80011d6:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80011da:	4641      	mov	r1, r8
 80011dc:	008a      	lsls	r2, r1, #2
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	4603      	mov	r3, r0
 80011e4:	4622      	mov	r2, r4
 80011e6:	189b      	adds	r3, r3, r2
 80011e8:	673b      	str	r3, [r7, #112]	; 0x70
 80011ea:	462b      	mov	r3, r5
 80011ec:	460a      	mov	r2, r1
 80011ee:	eb42 0303 	adc.w	r3, r2, r3
 80011f2:	677b      	str	r3, [r7, #116]	; 0x74
 80011f4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80011f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80011fc:	f7ff fa04 	bl	8000608 <__aeabi_ldivmod>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800120c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001210:	b21b      	sxth	r3, r3
 8001212:	17da      	asrs	r2, r3, #31
 8001214:	66bb      	str	r3, [r7, #104]	; 0x68
 8001216:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001218:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	f04f 0100 	mov.w	r1, #0
 8001224:	0b50      	lsrs	r0, r2, #13
 8001226:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800122a:	1359      	asrs	r1, r3, #13
 800122c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001230:	462b      	mov	r3, r5
 8001232:	fb00 f203 	mul.w	r2, r0, r3
 8001236:	4623      	mov	r3, r4
 8001238:	fb03 f301 	mul.w	r3, r3, r1
 800123c:	4413      	add	r3, r2
 800123e:	4622      	mov	r2, r4
 8001240:	fba2 2100 	umull	r2, r1, r2, r0
 8001244:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001248:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800124c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001250:	4413      	add	r3, r2
 8001252:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001256:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800125a:	f04f 0000 	mov.w	r0, #0
 800125e:	f04f 0100 	mov.w	r1, #0
 8001262:	0b50      	lsrs	r0, r2, #13
 8001264:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001268:	1359      	asrs	r1, r3, #13
 800126a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800126e:	462b      	mov	r3, r5
 8001270:	fb00 f203 	mul.w	r2, r0, r3
 8001274:	4623      	mov	r3, r4
 8001276:	fb03 f301 	mul.w	r3, r3, r1
 800127a:	4413      	add	r3, r2
 800127c:	4622      	mov	r2, r4
 800127e:	fba2 2100 	umull	r2, r1, r2, r0
 8001282:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001286:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800128a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800128e:	4413      	add	r3, r2
 8001290:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80012a0:	4621      	mov	r1, r4
 80012a2:	0e4a      	lsrs	r2, r1, #25
 80012a4:	4620      	mov	r0, r4
 80012a6:	4629      	mov	r1, r5
 80012a8:	460c      	mov	r4, r1
 80012aa:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80012ae:	164b      	asrs	r3, r1, #25
 80012b0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80012b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012b8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	17da      	asrs	r2, r3, #31
 80012c0:	663b      	str	r3, [r7, #96]	; 0x60
 80012c2:	667a      	str	r2, [r7, #100]	; 0x64
 80012c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80012c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80012cc:	462a      	mov	r2, r5
 80012ce:	fb02 f203 	mul.w	r2, r2, r3
 80012d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80012d6:	4621      	mov	r1, r4
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	4413      	add	r3, r2
 80012de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012e2:	4621      	mov	r1, r4
 80012e4:	fba2 2101 	umull	r2, r1, r2, r1
 80012e8:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80012ec:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80012f0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80012f4:	4413      	add	r3, r2
 80012f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	f04f 0300 	mov.w	r3, #0
 8001302:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001306:	4621      	mov	r1, r4
 8001308:	0cca      	lsrs	r2, r1, #19
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	460c      	mov	r4, r1
 8001310:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001314:	14cb      	asrs	r3, r1, #19
 8001316:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800131a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800131e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001322:	1884      	adds	r4, r0, r2
 8001324:	65bc      	str	r4, [r7, #88]	; 0x58
 8001326:	eb41 0303 	adc.w	r3, r1, r3
 800132a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800132c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001330:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001334:	4621      	mov	r1, r4
 8001336:	1889      	adds	r1, r1, r2
 8001338:	6539      	str	r1, [r7, #80]	; 0x50
 800133a:	4629      	mov	r1, r5
 800133c:	eb43 0101 	adc.w	r1, r3, r1
 8001340:	6579      	str	r1, [r7, #84]	; 0x54
 8001342:	f04f 0000 	mov.w	r0, #0
 8001346:	f04f 0100 	mov.w	r1, #0
 800134a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800134e:	4623      	mov	r3, r4
 8001350:	0a18      	lsrs	r0, r3, #8
 8001352:	462a      	mov	r2, r5
 8001354:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001358:	462b      	mov	r3, r5
 800135a:	1219      	asrs	r1, r3, #8
 800135c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001360:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001364:	b21b      	sxth	r3, r3
 8001366:	17da      	asrs	r2, r3, #31
 8001368:	64bb      	str	r3, [r7, #72]	; 0x48
 800136a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001378:	464c      	mov	r4, r9
 800137a:	0123      	lsls	r3, r4, #4
 800137c:	46c4      	mov	ip, r8
 800137e:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001382:	4644      	mov	r4, r8
 8001384:	0122      	lsls	r2, r4, #4
 8001386:	1884      	adds	r4, r0, r2
 8001388:	603c      	str	r4, [r7, #0]
 800138a:	eb41 0303 	adc.w	r3, r1, r3
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001394:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001398:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 800139c:	4618      	mov	r0, r3
 800139e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80013a2:	46bd      	mov	sp, r7
 80013a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080013a8 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80013ba:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	039a      	lsls	r2, r3, #14
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013d0:	4619      	mov	r1, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	fb01 f303 	mul.w	r3, r1, r3
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013de:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80013e6:	4611      	mov	r1, r2
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	fb01 f202 	mul.w	r2, r1, r2
 80013ee:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80013f0:	68f9      	ldr	r1, [r7, #12]
 80013f2:	7f09      	ldrb	r1, [r1, #28]
 80013f4:	4608      	mov	r0, r1
 80013f6:	6979      	ldr	r1, [r7, #20]
 80013f8:	fb00 f101 	mul.w	r1, r0, r1
 80013fc:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80013fe:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001402:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001406:	1292      	asrs	r2, r2, #10
 8001408:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800140c:	68f9      	ldr	r1, [r7, #12]
 800140e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001412:	fb01 f202 	mul.w	r2, r1, r2
 8001416:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800141a:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	13db      	asrs	r3, r3, #15
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	13d2      	asrs	r2, r2, #15
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	7e12      	ldrb	r2, [r2, #24]
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001446:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800144e:	bfa8      	it	ge
 8001450:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001454:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	131b      	asrs	r3, r3, #12
}
 800145a:	4618      	mov	r0, r3
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001478:	2b60      	cmp	r3, #96	; 0x60
 800147a:	d007      	beq.n	800148c <bmp280_read_fixed+0x28>
		if (humidity)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <bmp280_read_fixed+0x32>
 8001492:	2308      	movs	r3, #8
 8001494:	e000      	b.n	8001498 <bmp280_read_fixed+0x34>
 8001496:	2306      	movs	r3, #6
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f107 0218 	add.w	r2, r7, #24
 80014a2:	21f7      	movs	r1, #247	; 0xf7
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff fab1 	bl	8000a0c <read_data>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <bmp280_read_fixed+0x50>
		return false;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e038      	b.n	8001526 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80014b4:	7e3b      	ldrb	r3, [r7, #24]
 80014b6:	031a      	lsls	r2, r3, #12
 80014b8:	7e7b      	ldrb	r3, [r7, #25]
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4313      	orrs	r3, r2
 80014be:	7eba      	ldrb	r2, [r7, #26]
 80014c0:	0912      	lsrs	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	4313      	orrs	r3, r2
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80014c8:	7efb      	ldrb	r3, [r7, #27]
 80014ca:	031a      	lsls	r2, r3, #12
 80014cc:	7f3b      	ldrb	r3, [r7, #28]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4313      	orrs	r3, r2
 80014d2:	7f7a      	ldrb	r2, [r7, #29]
 80014d4:	0912      	lsrs	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	4313      	orrs	r3, r2
 80014da:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	461a      	mov	r2, r3
 80014e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f7ff fc6d 	bl	8000dc4 <compensate_temperature>
 80014ea:	4602      	mov	r2, r0
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	461a      	mov	r2, r3
 80014f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff fc9c 	bl	8000e34 <compensate_pressure>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00d      	beq.n	8001524 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001508:	7fbb      	ldrb	r3, [r7, #30]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	7ffa      	ldrb	r2, [r7, #31]
 800150e:	4313      	orrs	r3, r2
 8001510:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	461a      	mov	r2, r3
 8001516:	6a39      	ldr	r1, [r7, #32]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff ff45 	bl	80013a8 <compensate_humidity>
 800151e:	4602      	mov	r2, r0
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	3730      	adds	r7, #48	; 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <bmp280_read_float+0x1a>
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	e000      	b.n	800154c <bmp280_read_float+0x1c>
 800154a:	2300      	movs	r3, #0
 800154c:	f107 0218 	add.w	r2, r7, #24
 8001550:	f107 011c 	add.w	r1, r7, #28
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f7ff ff85 	bl	8001464 <bmp280_read_fixed>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d02d      	beq.n	80015bc <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe feac 	bl	80002c0 <__aeabi_i2f>
 8001568:	4603      	mov	r3, r0
 800156a:	4917      	ldr	r1, [pc, #92]	; (80015c8 <bmp280_read_float+0x98>)
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffaf 	bl	80004d0 <__aeabi_fdiv>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fe9b 	bl	80002b8 <__aeabi_ui2f>
 8001582:	4603      	mov	r3, r0
 8001584:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffa1 	bl	80004d0 <__aeabi_fdiv>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	601a      	str	r2, [r3, #0]
		if (humidity)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00d      	beq.n	80015b8 <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe fe8a 	bl	80002b8 <__aeabi_ui2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff90 	bl	80004d0 <__aeabi_fdiv>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	601a      	str	r2, [r3, #0]
		return true;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <bmp280_read_float+0x8e>
	}

	return false;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	42c80000 	.word	0x42c80000

080015cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10a      	bne.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80015de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015e4:	f000 fd9a 	bl	800211c <HAL_GPIO_TogglePin>
		bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80015ec:	4907      	ldr	r1, [pc, #28]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80015ee:	4808      	ldr	r0, [pc, #32]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80015f0:	f7ff ff9e 	bl	8001530 <bmp280_read_float>
	}
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40000800 	.word	0x40000800
 8001600:	40011000 	.word	0x40011000
 8001604:	20000100 	.word	0x20000100
 8001608:	200000f8 	.word	0x200000f8
 800160c:	200000fc 	.word	0x200000fc
 8001610:	200000c4 	.word	0x200000c4

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001618:	f000 fa50 	bl	8001abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161c:	f000 f828 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001620:	f000 f8e8 	bl	80017f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001624:	f000 f86a 	bl	80016fc <MX_I2C1_Init>
  MX_TIM4_Init();
 8001628:	f000 f896 	bl	8001758 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <main+0x4c>)
 800162e:	f002 fa35 	bl	8003a9c <HAL_TIM_Base_Start_IT>

  bmp280_init_default_params(&bmp280.params);
 8001632:	480c      	ldr	r0, [pc, #48]	; (8001664 <main+0x50>)
 8001634:	f7ff f9a0 	bl	8000978 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <main+0x54>)
 800163a:	2276      	movs	r2, #118	; 0x76
 800163c:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <main+0x54>)
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <main+0x58>)
 8001642:	629a      	str	r2, [r3, #40]	; 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001644:	e001      	b.n	800164a <main+0x36>
	Error_Handler();
 8001646:	f000 f92d 	bl	80018a4 <Error_Handler>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 800164a:	4906      	ldr	r1, [pc, #24]	; (8001664 <main+0x50>)
 800164c:	4806      	ldr	r0, [pc, #24]	; (8001668 <main+0x54>)
 800164e:	f7ff fb0c 	bl	8000c6a <bmp280_init>
 8001652:	4603      	mov	r3, r0
 8001654:	f083 0301 	eor.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f3      	bne.n	8001646 <main+0x32>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800165e:	e7fe      	b.n	800165e <main+0x4a>
 8001660:	2000007c 	.word	0x2000007c
 8001664:	200000f0 	.word	0x200000f0
 8001668:	200000c4 	.word	0x200000c4
 800166c:	20000028 	.word	0x20000028

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b090      	sub	sp, #64	; 0x40
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0318 	add.w	r3, r7, #24
 800167a:	2228      	movs	r2, #40	; 0x28
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fdba 	bl	80041f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001692:	2301      	movs	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a4:	2302      	movs	r3, #2
 80016a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b4:	f107 0318 	add.w	r3, r7, #24
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 fda3 	bl	8003204 <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016c4:	f000 f8ee 	bl	80018a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c8:	230f      	movs	r3, #15
 80016ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2302      	movs	r3, #2
 80016ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2102      	movs	r1, #2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 f810 	bl	8003708 <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016ee:	f000 f8d9 	bl	80018a4 <Error_Handler>
  }
}
 80016f2:	bf00      	nop
 80016f4:	3740      	adds	r7, #64	; 0x40
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_I2C1_Init+0x50>)
 8001702:	4a13      	ldr	r2, [pc, #76]	; (8001750 <MX_I2C1_Init+0x54>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_I2C1_Init+0x50>)
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <MX_I2C1_Init+0x58>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_I2C1_Init+0x50>)
 800171a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800171e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <MX_I2C1_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_I2C1_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_I2C1_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <MX_I2C1_Init+0x50>)
 800173a:	f000 fd09 	bl	8002150 <HAL_I2C_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001744:	f000 f8ae 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000028 	.word	0x20000028
 8001750:	40005400 	.word	0x40005400
 8001754:	000186a0 	.word	0x000186a0

08001758 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176c:	463b      	mov	r3, r7
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <MX_TIM4_Init+0x94>)
 8001776:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <MX_TIM4_Init+0x98>)
 8001778:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_TIM4_Init+0x94>)
 800177c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001780:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <MX_TIM4_Init+0x94>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <MX_TIM4_Init+0x94>)
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <MX_TIM4_Init+0x94>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_TIM4_Init+0x94>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800179c:	4813      	ldr	r0, [pc, #76]	; (80017ec <MX_TIM4_Init+0x94>)
 800179e:	f002 f92d 	bl	80039fc <HAL_TIM_Base_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80017a8:	f000 f87c 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4619      	mov	r1, r3
 80017b8:	480c      	ldr	r0, [pc, #48]	; (80017ec <MX_TIM4_Init+0x94>)
 80017ba:	f002 fac9 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80017c4:	f000 f86e 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017d0:	463b      	mov	r3, r7
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_TIM4_Init+0x94>)
 80017d6:	f002 fc9f 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80017e0:	f000 f860 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000007c 	.word	0x2000007c
 80017f0:	40000800 	.word	0x40000800

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <MX_GPIO_Init+0xa8>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a23      	ldr	r2, [pc, #140]	; (800189c <MX_GPIO_Init+0xa8>)
 800180e:	f043 0310 	orr.w	r3, r3, #16
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_GPIO_Init+0xa8>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <MX_GPIO_Init+0xa8>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a1d      	ldr	r2, [pc, #116]	; (800189c <MX_GPIO_Init+0xa8>)
 8001826:	f043 0320 	orr.w	r3, r3, #32
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <MX_GPIO_Init+0xa8>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <MX_GPIO_Init+0xa8>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a17      	ldr	r2, [pc, #92]	; (800189c <MX_GPIO_Init+0xa8>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_GPIO_Init+0xa8>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_GPIO_Init+0xa8>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a11      	ldr	r2, [pc, #68]	; (800189c <MX_GPIO_Init+0xa8>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_GPIO_Init+0xa8>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800186e:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MX_GPIO_Init+0xac>)
 8001870:	f000 fc3c 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2302      	movs	r3, #2
 8001884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4619      	mov	r1, r3
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_GPIO_Init+0xac>)
 800188e:	f000 faa9 	bl	8001de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001892:	bf00      	nop
 8001894:	3720      	adds	r7, #32
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	40011000 	.word	0x40011000

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80018ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <Error_Handler+0x2c>)
 80018b2:	f000 fc33 	bl	800211c <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80018b6:	2032      	movs	r0, #50	; 0x32
 80018b8:	f000 f962 	bl	8001b80 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80018bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <Error_Handler+0x2c>)
 80018c2:	f000 fc2b 	bl	800211c <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80018c6:	2032      	movs	r0, #50	; 0x32
 80018c8:	f000 f95a 	bl	8001b80 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80018cc:	e7ee      	b.n	80018ac <Error_Handler+0x8>
 80018ce:	bf00      	nop
 80018d0:	40011000 	.word	0x40011000

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_MspInit+0x5c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_MspInit+0x5c>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_MspInit+0x5c>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_MspInit+0x5c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_MspInit+0x5c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_MspInit+0x5c>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_MspInit+0x60>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_MspInit+0x60>)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000

08001938 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <HAL_I2C_MspInit+0x70>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d123      	bne.n	80019a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_I2C_MspInit+0x74>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a13      	ldr	r2, [pc, #76]	; (80019ac <HAL_I2C_MspInit+0x74>)
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_I2C_MspInit+0x74>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001970:	23c0      	movs	r3, #192	; 0xc0
 8001972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001974:	2312      	movs	r3, #18
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	4619      	mov	r1, r3
 8001982:	480b      	ldr	r0, [pc, #44]	; (80019b0 <HAL_I2C_MspInit+0x78>)
 8001984:	f000 fa2e 	bl	8001de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_I2C_MspInit+0x74>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_I2C_MspInit+0x74>)
 800198e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001992:	61d3      	str	r3, [r2, #28]
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_I2C_MspInit+0x74>)
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019a0:	bf00      	nop
 80019a2:	3720      	adds	r7, #32
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40005400 	.word	0x40005400
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010c00 	.word	0x40010c00

080019b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <HAL_TIM_Base_MspInit+0x44>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d113      	bne.n	80019ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_TIM_Base_MspInit+0x48>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_TIM_Base_MspInit+0x48>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	61d3      	str	r3, [r2, #28]
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_TIM_Base_MspInit+0x48>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	201e      	movs	r0, #30
 80019e4:	f000 f9c7 	bl	8001d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019e8:	201e      	movs	r0, #30
 80019ea:	f000 f9e0 	bl	8001dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40000800 	.word	0x40000800
 80019fc:	40021000 	.word	0x40021000

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a04:	e7fe      	b.n	8001a04 <NMI_Handler+0x4>

08001a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <MemManage_Handler+0x4>

08001a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a46:	f000 f87f 	bl	8001b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <TIM4_IRQHandler+0x10>)
 8001a56:	f002 f873 	bl	8003b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000007c 	.word	0x2000007c

08001a64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a70:	f7ff fff8 	bl	8001a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a76:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a78:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a8c:	4c09      	ldr	r4, [pc, #36]	; (8001ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f002 fbb5 	bl	8004208 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a9e:	f7ff fdb9 	bl	8001614 <main>
  bx lr
 8001aa2:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001aac:	080042a4 	.word	0x080042a4
  ldr r2, =_sbss
 8001ab0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ab4:	20000108 	.word	0x20000108

08001ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC1_2_IRQHandler>
	...

08001abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_Init+0x28>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_Init+0x28>)
 8001ac6:	f043 0310 	orr.w	r3, r3, #16
 8001aca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001acc:	2003      	movs	r0, #3
 8001ace:	f000 f947 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad2:	200f      	movs	r0, #15
 8001ad4:	f000 f808 	bl	8001ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad8:	f7ff fefc 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40022000 	.word	0x40022000

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x54>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x58>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f95f 	bl	8001dca <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00e      	b.n	8001b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d80a      	bhi.n	8001b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f000 f927 	bl	8001d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <HAL_InitTick+0x5c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000008 	.word	0x20000008
 8001b44:	20000004 	.word	0x20000004

08001b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_IncTick+0x1c>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_IncTick+0x20>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <HAL_IncTick+0x20>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	20000008 	.word	0x20000008
 8001b68:	20000104 	.word	0x20000104

08001b6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b02      	ldr	r3, [pc, #8]	; (8001b7c <HAL_GetTick+0x10>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	20000104 	.word	0x20000104

08001b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff fff0 	bl	8001b6c <HAL_GetTick>
 8001b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d005      	beq.n	8001ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_Delay+0x44>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ba6:	bf00      	nop
 8001ba8:	f7ff ffe0 	bl	8001b6c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d8f7      	bhi.n	8001ba8 <HAL_Delay+0x28>
  {
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000008 	.word	0x20000008

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4906      	ldr	r1, [pc, #24]	; (8001c60 <__NVIC_EnableIRQ+0x34>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d2c:	d301      	bcc.n	8001d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00f      	b.n	8001d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <SysTick_Config+0x40>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f7ff ff90 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <SysTick_Config+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <SysTick_Config+0x40>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff2d 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff42 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff90 	bl	8001cb8 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5f 	bl	8001c64 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff35 	bl	8001c2c <__NVIC_EnableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffa2 	bl	8001d1c <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b08b      	sub	sp, #44	; 0x2c
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df6:	e169      	b.n	80020cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	f040 8158 	bne.w	80020c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4a9a      	ldr	r2, [pc, #616]	; (8002084 <HAL_GPIO_Init+0x2a0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d05e      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e20:	4a98      	ldr	r2, [pc, #608]	; (8002084 <HAL_GPIO_Init+0x2a0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d875      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e26:	4a98      	ldr	r2, [pc, #608]	; (8002088 <HAL_GPIO_Init+0x2a4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d058      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e2c:	4a96      	ldr	r2, [pc, #600]	; (8002088 <HAL_GPIO_Init+0x2a4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d86f      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e32:	4a96      	ldr	r2, [pc, #600]	; (800208c <HAL_GPIO_Init+0x2a8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d052      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e38:	4a94      	ldr	r2, [pc, #592]	; (800208c <HAL_GPIO_Init+0x2a8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d869      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e3e:	4a94      	ldr	r2, [pc, #592]	; (8002090 <HAL_GPIO_Init+0x2ac>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d04c      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e44:	4a92      	ldr	r2, [pc, #584]	; (8002090 <HAL_GPIO_Init+0x2ac>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d863      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e4a:	4a92      	ldr	r2, [pc, #584]	; (8002094 <HAL_GPIO_Init+0x2b0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d046      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e50:	4a90      	ldr	r2, [pc, #576]	; (8002094 <HAL_GPIO_Init+0x2b0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d85d      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e56:	2b12      	cmp	r3, #18
 8001e58:	d82a      	bhi.n	8001eb0 <HAL_GPIO_Init+0xcc>
 8001e5a:	2b12      	cmp	r3, #18
 8001e5c:	d859      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e5e:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <HAL_GPIO_Init+0x80>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001edf 	.word	0x08001edf
 8001e68:	08001eb9 	.word	0x08001eb9
 8001e6c:	08001ecb 	.word	0x08001ecb
 8001e70:	08001f0d 	.word	0x08001f0d
 8001e74:	08001f13 	.word	0x08001f13
 8001e78:	08001f13 	.word	0x08001f13
 8001e7c:	08001f13 	.word	0x08001f13
 8001e80:	08001f13 	.word	0x08001f13
 8001e84:	08001f13 	.word	0x08001f13
 8001e88:	08001f13 	.word	0x08001f13
 8001e8c:	08001f13 	.word	0x08001f13
 8001e90:	08001f13 	.word	0x08001f13
 8001e94:	08001f13 	.word	0x08001f13
 8001e98:	08001f13 	.word	0x08001f13
 8001e9c:	08001f13 	.word	0x08001f13
 8001ea0:	08001f13 	.word	0x08001f13
 8001ea4:	08001f13 	.word	0x08001f13
 8001ea8:	08001ec1 	.word	0x08001ec1
 8001eac:	08001ed5 	.word	0x08001ed5
 8001eb0:	4a79      	ldr	r2, [pc, #484]	; (8002098 <HAL_GPIO_Init+0x2b4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eb6:	e02c      	b.n	8001f12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	623b      	str	r3, [r7, #32]
          break;
 8001ebe:	e029      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e024      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	3308      	adds	r3, #8
 8001ed0:	623b      	str	r3, [r7, #32]
          break;
 8001ed2:	e01f      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	330c      	adds	r3, #12
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e01a      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	623b      	str	r3, [r7, #32]
          break;
 8001eea:	e013      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	611a      	str	r2, [r3, #16]
          break;
 8001efe:	e009      	b.n	8001f14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f00:	2308      	movs	r3, #8
 8001f02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	615a      	str	r2, [r3, #20]
          break;
 8001f0a:	e003      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
          break;
 8001f10:	e000      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          break;
 8001f12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2bff      	cmp	r3, #255	; 0xff
 8001f18:	d801      	bhi.n	8001f1e <HAL_GPIO_Init+0x13a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	e001      	b.n	8001f22 <HAL_GPIO_Init+0x13e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2bff      	cmp	r3, #255	; 0xff
 8001f28:	d802      	bhi.n	8001f30 <HAL_GPIO_Init+0x14c>
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	e002      	b.n	8001f36 <HAL_GPIO_Init+0x152>
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	3b08      	subs	r3, #8
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	210f      	movs	r1, #15
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	401a      	ands	r2, r3
 8001f48:	6a39      	ldr	r1, [r7, #32]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	431a      	orrs	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80b1 	beq.w	80020c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f64:	4b4d      	ldr	r3, [pc, #308]	; (800209c <HAL_GPIO_Init+0x2b8>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a4c      	ldr	r2, [pc, #304]	; (800209c <HAL_GPIO_Init+0x2b8>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b4a      	ldr	r3, [pc, #296]	; (800209c <HAL_GPIO_Init+0x2b8>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f7c:	4a48      	ldr	r2, [pc, #288]	; (80020a0 <HAL_GPIO_Init+0x2bc>)
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a40      	ldr	r2, [pc, #256]	; (80020a4 <HAL_GPIO_Init+0x2c0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <HAL_GPIO_Init+0x1ec>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3f      	ldr	r2, [pc, #252]	; (80020a8 <HAL_GPIO_Init+0x2c4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00d      	beq.n	8001fcc <HAL_GPIO_Init+0x1e8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3e      	ldr	r2, [pc, #248]	; (80020ac <HAL_GPIO_Init+0x2c8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d007      	beq.n	8001fc8 <HAL_GPIO_Init+0x1e4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3d      	ldr	r2, [pc, #244]	; (80020b0 <HAL_GPIO_Init+0x2cc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d101      	bne.n	8001fc4 <HAL_GPIO_Init+0x1e0>
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e006      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	e004      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd4:	f002 0203 	and.w	r2, r2, #3
 8001fd8:	0092      	lsls	r2, r2, #2
 8001fda:	4093      	lsls	r3, r2
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fe2:	492f      	ldr	r1, [pc, #188]	; (80020a0 <HAL_GPIO_Init+0x2bc>)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	492c      	ldr	r1, [pc, #176]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	4928      	ldr	r1, [pc, #160]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002014:	4013      	ands	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	4922      	ldr	r1, [pc, #136]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	60cb      	str	r3, [r1, #12]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	491e      	ldr	r1, [pc, #120]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 800203c:	4013      	ands	r3, r2
 800203e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	4918      	ldr	r1, [pc, #96]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	43db      	mvns	r3, r3
 8002062:	4914      	ldr	r1, [pc, #80]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002064:	4013      	ands	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d021      	beq.n	80020b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	490e      	ldr	r1, [pc, #56]	; (80020b4 <HAL_GPIO_Init+0x2d0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	e021      	b.n	80020c6 <HAL_GPIO_Init+0x2e2>
 8002082:	bf00      	nop
 8002084:	10320000 	.word	0x10320000
 8002088:	10310000 	.word	0x10310000
 800208c:	10220000 	.word	0x10220000
 8002090:	10210000 	.word	0x10210000
 8002094:	10120000 	.word	0x10120000
 8002098:	10110000 	.word	0x10110000
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40010800 	.word	0x40010800
 80020a8:	40010c00 	.word	0x40010c00
 80020ac:	40011000 	.word	0x40011000
 80020b0:	40011400 	.word	0x40011400
 80020b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_GPIO_Init+0x304>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	43db      	mvns	r3, r3
 80020c0:	4909      	ldr	r1, [pc, #36]	; (80020e8 <HAL_GPIO_Init+0x304>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	3301      	adds	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f47f ae8e 	bne.w	8001df8 <HAL_GPIO_Init+0x14>
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	372c      	adds	r7, #44	; 0x2c
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
 80020f8:	4613      	mov	r3, r2
 80020fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002108:	e003      	b.n	8002112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	041a      	lsls	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	611a      	str	r2, [r3, #16]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4013      	ands	r3, r2
 8002134:	041a      	lsls	r2, r3, #16
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43d9      	mvns	r1, r3
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	400b      	ands	r3, r1
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	611a      	str	r2, [r3, #16]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
	...

08002150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e12b      	b.n	80023ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fbde 	bl	8001938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2224      	movs	r2, #36	; 0x24
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021b4:	f001 fbf0 	bl	8003998 <HAL_RCC_GetPCLK1Freq>
 80021b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4a81      	ldr	r2, [pc, #516]	; (80023c4 <HAL_I2C_Init+0x274>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d807      	bhi.n	80021d4 <HAL_I2C_Init+0x84>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a80      	ldr	r2, [pc, #512]	; (80023c8 <HAL_I2C_Init+0x278>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	bf94      	ite	ls
 80021cc:	2301      	movls	r3, #1
 80021ce:	2300      	movhi	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e006      	b.n	80021e2 <HAL_I2C_Init+0x92>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4a7d      	ldr	r2, [pc, #500]	; (80023cc <HAL_I2C_Init+0x27c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	bf94      	ite	ls
 80021dc:	2301      	movls	r3, #1
 80021de:	2300      	movhi	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0e7      	b.n	80023ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4a78      	ldr	r2, [pc, #480]	; (80023d0 <HAL_I2C_Init+0x280>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0c9b      	lsrs	r3, r3, #18
 80021f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a6a      	ldr	r2, [pc, #424]	; (80023c4 <HAL_I2C_Init+0x274>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d802      	bhi.n	8002224 <HAL_I2C_Init+0xd4>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3301      	adds	r3, #1
 8002222:	e009      	b.n	8002238 <HAL_I2C_Init+0xe8>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	4a69      	ldr	r2, [pc, #420]	; (80023d4 <HAL_I2C_Init+0x284>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	099b      	lsrs	r3, r3, #6
 8002236:	3301      	adds	r3, #1
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	430b      	orrs	r3, r1
 800223e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800224a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	495c      	ldr	r1, [pc, #368]	; (80023c4 <HAL_I2C_Init+0x274>)
 8002254:	428b      	cmp	r3, r1
 8002256:	d819      	bhi.n	800228c <HAL_I2C_Init+0x13c>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1e59      	subs	r1, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fbb1 f3f3 	udiv	r3, r1, r3
 8002266:	1c59      	adds	r1, r3, #1
 8002268:	f640 73fc 	movw	r3, #4092	; 0xffc
 800226c:	400b      	ands	r3, r1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_I2C_Init+0x138>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1e59      	subs	r1, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002280:	3301      	adds	r3, #1
 8002282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002286:	e051      	b.n	800232c <HAL_I2C_Init+0x1dc>
 8002288:	2304      	movs	r3, #4
 800228a:	e04f      	b.n	800232c <HAL_I2C_Init+0x1dc>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d111      	bne.n	80022b8 <HAL_I2C_Init+0x168>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1e58      	subs	r0, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	440b      	add	r3, r1
 80022a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e012      	b.n	80022de <HAL_I2C_Init+0x18e>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1e58      	subs	r0, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	0099      	lsls	r1, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_Init+0x196>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e022      	b.n	800232c <HAL_I2C_Init+0x1dc>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10e      	bne.n	800230c <HAL_I2C_Init+0x1bc>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1e58      	subs	r0, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6859      	ldr	r1, [r3, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	440b      	add	r3, r1
 80022fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002300:	3301      	adds	r3, #1
 8002302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230a:	e00f      	b.n	800232c <HAL_I2C_Init+0x1dc>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1e58      	subs	r0, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	0099      	lsls	r1, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002322:	3301      	adds	r3, #1
 8002324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	6809      	ldr	r1, [r1, #0]
 8002330:	4313      	orrs	r3, r2
 8002332:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800235a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6911      	ldr	r1, [r2, #16]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68d2      	ldr	r2, [r2, #12]
 8002366:	4311      	orrs	r1, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	430b      	orrs	r3, r1
 800236e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	000186a0 	.word	0x000186a0
 80023c8:	001e847f 	.word	0x001e847f
 80023cc:	003d08ff 	.word	0x003d08ff
 80023d0:	431bde83 	.word	0x431bde83
 80023d4:	10624dd3 	.word	0x10624dd3

080023d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	817b      	strh	r3, [r7, #10]
 80023ea:	460b      	mov	r3, r1
 80023ec:	813b      	strh	r3, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023f2:	f7ff fbbb 	bl	8001b6c <HAL_GetTick>
 80023f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b20      	cmp	r3, #32
 8002402:	f040 80d9 	bne.w	80025b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2319      	movs	r3, #25
 800240c:	2201      	movs	r2, #1
 800240e:	496d      	ldr	r1, [pc, #436]	; (80025c4 <HAL_I2C_Mem_Write+0x1ec>)
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fcc1 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800241c:	2302      	movs	r3, #2
 800241e:	e0cc      	b.n	80025ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_I2C_Mem_Write+0x56>
 800242a:	2302      	movs	r3, #2
 800242c:	e0c5      	b.n	80025ba <HAL_I2C_Mem_Write+0x1e2>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d007      	beq.n	8002454 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002462:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2221      	movs	r2, #33	; 0x21
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a3a      	ldr	r2, [r7, #32]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a4d      	ldr	r2, [pc, #308]	; (80025c8 <HAL_I2C_Mem_Write+0x1f0>)
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002496:	88f8      	ldrh	r0, [r7, #6]
 8002498:	893a      	ldrh	r2, [r7, #8]
 800249a:	8979      	ldrh	r1, [r7, #10]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4603      	mov	r3, r0
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 faf8 	bl	8002a9c <I2C_RequestMemoryWrite>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d052      	beq.n	8002558 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e081      	b.n	80025ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fd86 	bl	8002fcc <I2C_WaitOnTXEFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d107      	bne.n	80024de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06b      	b.n	80025ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b04      	cmp	r3, #4
 800251e:	d11b      	bne.n	8002558 <HAL_I2C_Mem_Write+0x180>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	d017      	beq.n	8002558 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1aa      	bne.n	80024b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 fd79 	bl	800305c <I2C_WaitOnBTFFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00d      	beq.n	800258c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	2b04      	cmp	r3, #4
 8002576:	d107      	bne.n	8002588 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002586:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e016      	b.n	80025ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	00100002 	.word	0x00100002
 80025c8:	ffff0000 	.word	0xffff0000

080025cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	; 0x30
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	4608      	mov	r0, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	817b      	strh	r3, [r7, #10]
 80025de:	460b      	mov	r3, r1
 80025e0:	813b      	strh	r3, [r7, #8]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ea:	f7ff fabf 	bl	8001b6c <HAL_GetTick>
 80025ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	f040 8244 	bne.w	8002a86 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2319      	movs	r3, #25
 8002604:	2201      	movs	r2, #1
 8002606:	4982      	ldr	r1, [pc, #520]	; (8002810 <HAL_I2C_Mem_Read+0x244>)
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fbc5 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
 8002616:	e237      	b.n	8002a88 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_I2C_Mem_Read+0x5a>
 8002622:	2302      	movs	r3, #2
 8002624:	e230      	b.n	8002a88 <HAL_I2C_Mem_Read+0x4bc>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d007      	beq.n	800264c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2222      	movs	r2, #34	; 0x22
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800267c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a62      	ldr	r2, [pc, #392]	; (8002814 <HAL_I2C_Mem_Read+0x248>)
 800268c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800268e:	88f8      	ldrh	r0, [r7, #6]
 8002690:	893a      	ldrh	r2, [r7, #8]
 8002692:	8979      	ldrh	r1, [r7, #10]
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4603      	mov	r3, r0
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fa92 	bl	8002bc8 <I2C_RequestMemoryRead>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e1ec      	b.n	8002a88 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d113      	bne.n	80026de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e1c0      	b.n	8002a60 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d11e      	bne.n	8002724 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026f6:	b672      	cpsid	i
}
 80026f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002720:	b662      	cpsie	i
}
 8002722:	e035      	b.n	8002790 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	2b02      	cmp	r3, #2
 800272a:	d11e      	bne.n	800276a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800273a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800273c:	b672      	cpsid	i
}
 800273e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002764:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002766:	b662      	cpsie	i
}
 8002768:	e012      	b.n	8002790 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002778:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002790:	e166      	b.n	8002a60 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002796:	2b03      	cmp	r3, #3
 8002798:	f200 811f 	bhi.w	80029da <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d123      	bne.n	80027ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fc9f 	bl	80030ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e167      	b.n	8002a88 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027ea:	e139      	b.n	8002a60 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d152      	bne.n	800289a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	2200      	movs	r2, #0
 80027fc:	4906      	ldr	r1, [pc, #24]	; (8002818 <HAL_I2C_Mem_Read+0x24c>)
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 faca 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e13c      	b.n	8002a88 <HAL_I2C_Mem_Read+0x4bc>
 800280e:	bf00      	nop
 8002810:	00100002 	.word	0x00100002
 8002814:	ffff0000 	.word	0xffff0000
 8002818:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800281c:	b672      	cpsid	i
}
 800281e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002862:	b662      	cpsie	i
}
 8002864:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002898:	e0e2      	b.n	8002a60 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	2200      	movs	r2, #0
 80028a2:	497b      	ldr	r1, [pc, #492]	; (8002a90 <HAL_I2C_Mem_Read+0x4c4>)
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fa77 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0e9      	b.n	8002a88 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028c4:	b672      	cpsid	i
}
 80028c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80028fa:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <HAL_I2C_Mem_Read+0x4c8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	08db      	lsrs	r3, r3, #3
 8002900:	4a65      	ldr	r2, [pc, #404]	; (8002a98 <HAL_I2C_Mem_Read+0x4cc>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0a1a      	lsrs	r2, r3, #8
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00da      	lsls	r2, r3, #3
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	3b01      	subs	r3, #1
 8002918:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d118      	bne.n	8002952 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002942:	b662      	cpsie	i
}
 8002944:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e09a      	b.n	8002a88 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b04      	cmp	r3, #4
 800295e:	d1d9      	bne.n	8002914 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029a2:	b662      	cpsie	i
}
 80029a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029d8:	e042      	b.n	8002a60 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fb84 	bl	80030ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e04c      	b.n	8002a88 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d118      	bne.n	8002a60 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f47f ae94 	bne.w	8002792 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
  }
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3728      	adds	r7, #40	; 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	00010004 	.word	0x00010004
 8002a94:	20000000 	.word	0x20000000
 8002a98:	14f8b589 	.word	0x14f8b589

08002a9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	4608      	mov	r0, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	817b      	strh	r3, [r7, #10]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	813b      	strh	r3, [r7, #8]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f960 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aec:	d103      	bne.n	8002af6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e05f      	b.n	8002bba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002afa:	897b      	ldrh	r3, [r7, #10]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	6a3a      	ldr	r2, [r7, #32]
 8002b0e:	492d      	ldr	r1, [pc, #180]	; (8002bc4 <I2C_RequestMemoryWrite+0x128>)
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f9bb 	bl	8002e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e04c      	b.n	8002bba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	6a39      	ldr	r1, [r7, #32]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fa46 	bl	8002fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d107      	bne.n	8002b5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e02b      	b.n	8002bba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b68:	893b      	ldrh	r3, [r7, #8]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	611a      	str	r2, [r3, #16]
 8002b72:	e021      	b.n	8002bb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b74:	893b      	ldrh	r3, [r7, #8]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	6a39      	ldr	r1, [r7, #32]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fa20 	bl	8002fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d107      	bne.n	8002baa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e005      	b.n	8002bba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bae:	893b      	ldrh	r3, [r7, #8]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	00010002 	.word	0x00010002

08002bc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	817b      	strh	r3, [r7, #10]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	813b      	strh	r3, [r7, #8]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bf0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f8c2 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c28:	d103      	bne.n	8002c32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e0aa      	b.n	8002d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c36:	897b      	ldrh	r3, [r7, #10]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	6a3a      	ldr	r2, [r7, #32]
 8002c4a:	4952      	ldr	r1, [pc, #328]	; (8002d94 <I2C_RequestMemoryRead+0x1cc>)
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f91d 	bl	8002e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e097      	b.n	8002d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	6a39      	ldr	r1, [r7, #32]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f9a8 	bl	8002fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d107      	bne.n	8002c9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e076      	b.n	8002d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d105      	bne.n	8002cb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ca4:	893b      	ldrh	r3, [r7, #8]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	611a      	str	r2, [r3, #16]
 8002cae:	e021      	b.n	8002cf4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cb0:	893b      	ldrh	r3, [r7, #8]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc0:	6a39      	ldr	r1, [r7, #32]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f982 	bl	8002fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d107      	bne.n	8002ce6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e050      	b.n	8002d8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cea:	893b      	ldrh	r3, [r7, #8]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf6:	6a39      	ldr	r1, [r7, #32]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f967 	bl	8002fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d107      	bne.n	8002d1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e035      	b.n	8002d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f82b 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d56:	d103      	bne.n	8002d60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e013      	b.n	8002d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d64:	897b      	ldrh	r3, [r7, #10]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	6a3a      	ldr	r2, [r7, #32]
 8002d78:	4906      	ldr	r1, [pc, #24]	; (8002d94 <I2C_RequestMemoryRead+0x1cc>)
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f886 	bl	8002e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	00010002 	.word	0x00010002

08002d98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da8:	e048      	b.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d044      	beq.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db2:	f7fe fedb 	bl	8001b6c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d302      	bcc.n	8002dc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d139      	bne.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	0c1b      	lsrs	r3, r3, #16
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d10d      	bne.n	8002dee <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	e00c      	b.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	43da      	mvns	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d116      	bne.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e023      	b.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	0c1b      	lsrs	r3, r3, #16
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d10d      	bne.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4013      	ands	r3, r2
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	e00c      	b.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	43da      	mvns	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d093      	beq.n	8002daa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e9a:	e071      	b.n	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eaa:	d123      	bne.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ec4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f043 0204 	orr.w	r2, r3, #4
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e067      	b.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efa:	d041      	beq.n	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efc:	f7fe fe36 	bl	8001b6c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d302      	bcc.n	8002f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d136      	bne.n	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d10c      	bne.n	8002f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	43da      	mvns	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4013      	ands	r3, r2
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e00b      	b.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d016      	beq.n	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e021      	b.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	0c1b      	lsrs	r3, r3, #16
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d10c      	bne.n	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	43da      	mvns	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4013      	ands	r3, r2
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf14      	ite	ne
 8002f9c:	2301      	movne	r3, #1
 8002f9e:	2300      	moveq	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e00b      	b.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bf14      	ite	ne
 8002fb6:	2301      	movne	r3, #1
 8002fb8:	2300      	moveq	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f47f af6d 	bne.w	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd8:	e034      	b.n	8003044 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f8e3 	bl	80031a6 <I2C_IsAcknowledgeFailed>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e034      	b.n	8003054 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d028      	beq.n	8003044 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff2:	f7fe fdbb 	bl	8001b6c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d302      	bcc.n	8003008 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d11d      	bne.n	8003044 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	2b80      	cmp	r3, #128	; 0x80
 8003014:	d016      	beq.n	8003044 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e007      	b.n	8003054 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d1c3      	bne.n	8002fda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003068:	e034      	b.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f89b 	bl	80031a6 <I2C_IsAcknowledgeFailed>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e034      	b.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d028      	beq.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7fe fd73 	bl	8001b6c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d11d      	bne.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d016      	beq.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e007      	b.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d1c3      	bne.n	800306a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030f8:	e049      	b.n	800318e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b10      	cmp	r3, #16
 8003106:	d119      	bne.n	800313c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0210 	mvn.w	r2, #16
 8003110:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e030      	b.n	800319e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313c:	f7fe fd16 	bl	8001b6c <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	d302      	bcc.n	8003152 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d11d      	bne.n	800318e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d016      	beq.n	800318e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f043 0220 	orr.w	r2, r3, #32
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e007      	b.n	800319e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	2b40      	cmp	r3, #64	; 0x40
 800319a:	d1ae      	bne.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031bc:	d11b      	bne.n	80031f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f043 0204 	orr.w	r2, r3, #4
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
	...

08003204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e272      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 8087 	beq.w	8003332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003224:	4b92      	ldr	r3, [pc, #584]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b04      	cmp	r3, #4
 800322e:	d00c      	beq.n	800324a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003230:	4b8f      	ldr	r3, [pc, #572]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d112      	bne.n	8003262 <HAL_RCC_OscConfig+0x5e>
 800323c:	4b8c      	ldr	r3, [pc, #560]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003248:	d10b      	bne.n	8003262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324a:	4b89      	ldr	r3, [pc, #548]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d06c      	beq.n	8003330 <HAL_RCC_OscConfig+0x12c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d168      	bne.n	8003330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e24c      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x76>
 800326c:	4b80      	ldr	r3, [pc, #512]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a7f      	ldr	r2, [pc, #508]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	e02e      	b.n	80032d8 <HAL_RCC_OscConfig+0xd4>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x98>
 8003282:	4b7b      	ldr	r3, [pc, #492]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a7a      	ldr	r2, [pc, #488]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b78      	ldr	r3, [pc, #480]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a77      	ldr	r2, [pc, #476]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e01d      	b.n	80032d8 <HAL_RCC_OscConfig+0xd4>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0xbc>
 80032a6:	4b72      	ldr	r3, [pc, #456]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a71      	ldr	r2, [pc, #452]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6e      	ldr	r2, [pc, #440]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0xd4>
 80032c0:	4b6b      	ldr	r3, [pc, #428]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a6a      	ldr	r2, [pc, #424]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	4b68      	ldr	r3, [pc, #416]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a67      	ldr	r2, [pc, #412]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fc44 	bl	8001b6c <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe fc40 	bl	8001b6c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e200      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b5d      	ldr	r3, [pc, #372]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0xe4>
 8003306:	e014      	b.n	8003332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe fc30 	bl	8001b6c <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003310:	f7fe fc2c 	bl	8001b6c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	; 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1ec      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003322:	4b53      	ldr	r3, [pc, #332]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x10c>
 800332e:	e000      	b.n	8003332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d063      	beq.n	8003406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800333e:	4b4c      	ldr	r3, [pc, #304]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800334a:	4b49      	ldr	r3, [pc, #292]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b08      	cmp	r3, #8
 8003354:	d11c      	bne.n	8003390 <HAL_RCC_OscConfig+0x18c>
 8003356:	4b46      	ldr	r3, [pc, #280]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d116      	bne.n	8003390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	4b43      	ldr	r3, [pc, #268]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_RCC_OscConfig+0x176>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d001      	beq.n	800337a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e1c0      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4939      	ldr	r1, [pc, #228]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338e:	e03a      	b.n	8003406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003398:	4b36      	ldr	r3, [pc, #216]	; (8003474 <HAL_RCC_OscConfig+0x270>)
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fe fbe5 	bl	8001b6c <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a6:	f7fe fbe1 	bl	8001b6c <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1a1      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b8:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c4:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4927      	ldr	r1, [pc, #156]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	600b      	str	r3, [r1, #0]
 80033d8:	e015      	b.n	8003406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033da:	4b26      	ldr	r3, [pc, #152]	; (8003474 <HAL_RCC_OscConfig+0x270>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe fbc4 	bl	8001b6c <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e8:	f7fe fbc0 	bl	8001b6c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e180      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d03a      	beq.n	8003488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d019      	beq.n	800344e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341a:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_RCC_OscConfig+0x274>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003420:	f7fe fba4 	bl	8001b6c <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003428:	f7fe fba0 	bl	8001b6c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e160      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343a:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003446:	2001      	movs	r0, #1
 8003448:	f000 faba 	bl	80039c0 <RCC_Delay>
 800344c:	e01c      	b.n	8003488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344e:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <HAL_RCC_OscConfig+0x274>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003454:	f7fe fb8a 	bl	8001b6c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345a:	e00f      	b.n	800347c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345c:	f7fe fb86 	bl	8001b6c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d908      	bls.n	800347c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e146      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
 8003474:	42420000 	.word	0x42420000
 8003478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347c:	4b92      	ldr	r3, [pc, #584]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e9      	bne.n	800345c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80a6 	beq.w	80035e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349a:	4b8b      	ldr	r3, [pc, #556]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	4a87      	ldr	r2, [pc, #540]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b0:	61d3      	str	r3, [r2, #28]
 80034b2:	4b85      	ldr	r3, [pc, #532]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c2:	4b82      	ldr	r3, [pc, #520]	; (80036cc <HAL_RCC_OscConfig+0x4c8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d118      	bne.n	8003500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ce:	4b7f      	ldr	r3, [pc, #508]	; (80036cc <HAL_RCC_OscConfig+0x4c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7e      	ldr	r2, [pc, #504]	; (80036cc <HAL_RCC_OscConfig+0x4c8>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034da:	f7fe fb47 	bl	8001b6c <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e2:	f7fe fb43 	bl	8001b6c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b64      	cmp	r3, #100	; 0x64
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e103      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	4b75      	ldr	r3, [pc, #468]	; (80036cc <HAL_RCC_OscConfig+0x4c8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d106      	bne.n	8003516 <HAL_RCC_OscConfig+0x312>
 8003508:	4b6f      	ldr	r3, [pc, #444]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4a6e      	ldr	r2, [pc, #440]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	e02d      	b.n	8003572 <HAL_RCC_OscConfig+0x36e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x334>
 800351e:	4b6a      	ldr	r3, [pc, #424]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4a69      	ldr	r2, [pc, #420]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	6213      	str	r3, [r2, #32]
 800352a:	4b67      	ldr	r3, [pc, #412]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a66      	ldr	r2, [pc, #408]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	f023 0304 	bic.w	r3, r3, #4
 8003534:	6213      	str	r3, [r2, #32]
 8003536:	e01c      	b.n	8003572 <HAL_RCC_OscConfig+0x36e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b05      	cmp	r3, #5
 800353e:	d10c      	bne.n	800355a <HAL_RCC_OscConfig+0x356>
 8003540:	4b61      	ldr	r3, [pc, #388]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	4a60      	ldr	r2, [pc, #384]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	6213      	str	r3, [r2, #32]
 800354c:	4b5e      	ldr	r3, [pc, #376]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a5d      	ldr	r2, [pc, #372]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6213      	str	r3, [r2, #32]
 8003558:	e00b      	b.n	8003572 <HAL_RCC_OscConfig+0x36e>
 800355a:	4b5b      	ldr	r3, [pc, #364]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a5a      	ldr	r2, [pc, #360]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6213      	str	r3, [r2, #32]
 8003566:	4b58      	ldr	r3, [pc, #352]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a57      	ldr	r2, [pc, #348]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d015      	beq.n	80035a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357a:	f7fe faf7 	bl	8001b6c <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fe faf3 	bl	8001b6c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0b1      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003598:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ee      	beq.n	8003582 <HAL_RCC_OscConfig+0x37e>
 80035a4:	e014      	b.n	80035d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7fe fae1 	bl	8001b6c <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fe fadd 	bl	8001b6c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035bc:	4293      	cmp	r3, r2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e09b      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c4:	4b40      	ldr	r3, [pc, #256]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ee      	bne.n	80035ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d105      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d6:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	4a3b      	ldr	r2, [pc, #236]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8087 	beq.w	80036fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ec:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d061      	beq.n	80036bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d146      	bne.n	800368e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003600:	4b33      	ldr	r3, [pc, #204]	; (80036d0 <HAL_RCC_OscConfig+0x4cc>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fe fab1 	bl	8001b6c <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360e:	f7fe faad 	bl	8001b6c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e06d      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003620:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003634:	d108      	bne.n	8003648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003636:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	4921      	ldr	r1, [pc, #132]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003648:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a19      	ldr	r1, [r3, #32]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	430b      	orrs	r3, r1
 800365a:	491b      	ldr	r1, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCC_OscConfig+0x4cc>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe fa81 	bl	8001b6c <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe fa7d 	bl	8001b6c <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e03d      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x46a>
 800368c:	e035      	b.n	80036fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <HAL_RCC_OscConfig+0x4cc>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe fa6a 	bl	8001b6c <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe fa66 	bl	8001b6c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e026      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x498>
 80036ba:	e01e      	b.n	80036fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e019      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40007000 	.word	0x40007000
 80036d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCC_OscConfig+0x500>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021000 	.word	0x40021000

08003708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0d0      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800371c:	4b6a      	ldr	r3, [pc, #424]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d910      	bls.n	800374c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b67      	ldr	r3, [pc, #412]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 0207 	bic.w	r2, r3, #7
 8003732:	4965      	ldr	r1, [pc, #404]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b63      	ldr	r3, [pc, #396]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0b8      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d020      	beq.n	800379a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003764:	4b59      	ldr	r3, [pc, #356]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a58      	ldr	r2, [pc, #352]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800376e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800377c:	4b53      	ldr	r3, [pc, #332]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a52      	ldr	r2, [pc, #328]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003788:	4b50      	ldr	r3, [pc, #320]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	494d      	ldr	r1, [pc, #308]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	4313      	orrs	r3, r2
 8003798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d040      	beq.n	8003828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	4b47      	ldr	r3, [pc, #284]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d115      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e07f      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c6:	4b41      	ldr	r3, [pc, #260]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e073      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d6:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e06b      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e6:	4b39      	ldr	r3, [pc, #228]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f023 0203 	bic.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4936      	ldr	r1, [pc, #216]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f8:	f7fe f9b8 	bl	8001b6c <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003800:	f7fe f9b4 	bl	8001b6c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	; 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e053      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 020c 	and.w	r2, r3, #12
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	429a      	cmp	r2, r3
 8003826:	d1eb      	bne.n	8003800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003828:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d210      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 0207 	bic.w	r2, r3, #7
 800383e:	4922      	ldr	r1, [pc, #136]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e032      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4916      	ldr	r1, [pc, #88]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	490e      	ldr	r1, [pc, #56]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003896:	f000 f821 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 800389a:	4602      	mov	r2, r0
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	490a      	ldr	r1, [pc, #40]	; (80038d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	5ccb      	ldrb	r3, [r1, r3]
 80038aa:	fa22 f303 	lsr.w	r3, r2, r3
 80038ae:	4a09      	ldr	r2, [pc, #36]	; (80038d4 <HAL_RCC_ClockConfig+0x1cc>)
 80038b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_ClockConfig+0x1d0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe f916 	bl	8001ae8 <HAL_InitTick>

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40022000 	.word	0x40022000
 80038cc:	40021000 	.word	0x40021000
 80038d0:	08004268 	.word	0x08004268
 80038d4:	20000000 	.word	0x20000000
 80038d8:	20000004 	.word	0x20000004

080038dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	2300      	movs	r3, #0
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038f6:	4b1e      	ldr	r3, [pc, #120]	; (8003970 <HAL_RCC_GetSysClockFreq+0x94>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b04      	cmp	r3, #4
 8003904:	d002      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x30>
 8003906:	2b08      	cmp	r3, #8
 8003908:	d003      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x36>
 800390a:	e027      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_RCC_GetSysClockFreq+0x98>)
 800390e:	613b      	str	r3, [r7, #16]
      break;
 8003910:	e027      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	0c9b      	lsrs	r3, r3, #18
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	4a17      	ldr	r2, [pc, #92]	; (8003978 <HAL_RCC_GetSysClockFreq+0x9c>)
 800391c:	5cd3      	ldrb	r3, [r2, r3]
 800391e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d010      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_RCC_GetSysClockFreq+0x94>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	0c5b      	lsrs	r3, r3, #17
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	4a11      	ldr	r2, [pc, #68]	; (800397c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <HAL_RCC_GetSysClockFreq+0x98>)
 800393e:	fb03 f202 	mul.w	r2, r3, r2
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e004      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	613b      	str	r3, [r7, #16]
      break;
 800395a:	e002      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetSysClockFreq+0x98>)
 800395e:	613b      	str	r3, [r7, #16]
      break;
 8003960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003962:	693b      	ldr	r3, [r7, #16]
}
 8003964:	4618      	mov	r0, r3
 8003966:	371c      	adds	r7, #28
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	007a1200 	.word	0x007a1200
 8003978:	08004280 	.word	0x08004280
 800397c:	08004290 	.word	0x08004290
 8003980:	003d0900 	.word	0x003d0900

08003984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003988:	4b02      	ldr	r3, [pc, #8]	; (8003994 <HAL_RCC_GetHCLKFreq+0x10>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	20000000 	.word	0x20000000

08003998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800399c:	f7ff fff2 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4903      	ldr	r1, [pc, #12]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	08004278 	.word	0x08004278

080039c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <RCC_Delay+0x34>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <RCC_Delay+0x38>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	0a5b      	lsrs	r3, r3, #9
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039dc:	bf00      	nop
  }
  while (Delay --);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1e5a      	subs	r2, r3, #1
 80039e2:	60fa      	str	r2, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f9      	bne.n	80039dc <RCC_Delay+0x1c>
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr
 80039f4:	20000000 	.word	0x20000000
 80039f8:	10624dd3 	.word	0x10624dd3

080039fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e041      	b.n	8003a92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd ffc6 	bl	80019b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f000 fa74 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d001      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e03a      	b.n	8003b2a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a18      	ldr	r2, [pc, #96]	; (8003b34 <HAL_TIM_Base_Start_IT+0x98>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00e      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x58>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ade:	d009      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x58>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a14      	ldr	r2, [pc, #80]	; (8003b38 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d004      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x58>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <HAL_TIM_Base_Start_IT+0xa0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d111      	bne.n	8003b18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b06      	cmp	r3, #6
 8003b04:	d010      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b16:	e007      	b.n	8003b28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800

08003b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d122      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d11b      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0202 	mvn.w	r2, #2
 8003b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9b4 	bl	8003ef0 <HAL_TIM_IC_CaptureCallback>
 8003b88:	e005      	b.n	8003b96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f9a7 	bl	8003ede <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d122      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d11b      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0204 	mvn.w	r2, #4
 8003bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f98a 	bl	8003ef0 <HAL_TIM_IC_CaptureCallback>
 8003bdc:	e005      	b.n	8003bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f97d 	bl	8003ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f98c 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d122      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d11b      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0208 	mvn.w	r2, #8
 8003c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2204      	movs	r2, #4
 8003c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f960 	bl	8003ef0 <HAL_TIM_IC_CaptureCallback>
 8003c30:	e005      	b.n	8003c3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f953 	bl	8003ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f962 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d122      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d11b      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0210 	mvn.w	r2, #16
 8003c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f936 	bl	8003ef0 <HAL_TIM_IC_CaptureCallback>
 8003c84:	e005      	b.n	8003c92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f929 	bl	8003ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f938 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d107      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0201 	mvn.w	r2, #1
 8003cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd fc84 	bl	80015cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b80      	cmp	r3, #128	; 0x80
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cdc:	2b80      	cmp	r3, #128	; 0x80
 8003cde:	d107      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa7b 	bl	80041e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d10e      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d107      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f8fc 	bl	8003f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d10e      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d107      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0220 	mvn.w	r2, #32
 8003d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa46 	bl	80041d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_TIM_ConfigClockSource+0x1c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e0b4      	b.n	8003ed6 <HAL_TIM_ConfigClockSource+0x186>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da4:	d03e      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0xd4>
 8003da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003daa:	f200 8087 	bhi.w	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db2:	f000 8086 	beq.w	8003ec2 <HAL_TIM_ConfigClockSource+0x172>
 8003db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dba:	d87f      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dbc:	2b70      	cmp	r3, #112	; 0x70
 8003dbe:	d01a      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0xa6>
 8003dc0:	2b70      	cmp	r3, #112	; 0x70
 8003dc2:	d87b      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dc4:	2b60      	cmp	r3, #96	; 0x60
 8003dc6:	d050      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x11a>
 8003dc8:	2b60      	cmp	r3, #96	; 0x60
 8003dca:	d877      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d03c      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0xfa>
 8003dd0:	2b50      	cmp	r3, #80	; 0x50
 8003dd2:	d873      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d058      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x13a>
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	d86f      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003ddc:	2b30      	cmp	r3, #48	; 0x30
 8003dde:	d064      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x15a>
 8003de0:	2b30      	cmp	r3, #48	; 0x30
 8003de2:	d86b      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d060      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x15a>
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d867      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d05c      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x15a>
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d05a      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x15a>
 8003df4:	e062      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e06:	f000 f968 	bl	80040da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	609a      	str	r2, [r3, #8]
      break;
 8003e22:	e04f      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e34:	f000 f951 	bl	80040da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e46:	609a      	str	r2, [r3, #8]
      break;
 8003e48:	e03c      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e56:	461a      	mov	r2, r3
 8003e58:	f000 f8c8 	bl	8003fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2150      	movs	r1, #80	; 0x50
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f91f 	bl	80040a6 <TIM_ITRx_SetConfig>
      break;
 8003e68:	e02c      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e76:	461a      	mov	r2, r3
 8003e78:	f000 f8e6 	bl	8004048 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2160      	movs	r1, #96	; 0x60
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f90f 	bl	80040a6 <TIM_ITRx_SetConfig>
      break;
 8003e88:	e01c      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e96:	461a      	mov	r2, r3
 8003e98:	f000 f8a8 	bl	8003fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2140      	movs	r1, #64	; 0x40
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f8ff 	bl	80040a6 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e00c      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	f000 f8f6 	bl	80040a6 <TIM_ITRx_SetConfig>
      break;
 8003eba:	e003      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec0:	e000      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr

08003ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
	...

08003f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a29      	ldr	r2, [pc, #164]	; (8003fe0 <TIM_Base_SetConfig+0xb8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x30>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x30>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <TIM_Base_SetConfig+0xbc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x30>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a25      	ldr	r2, [pc, #148]	; (8003fe8 <TIM_Base_SetConfig+0xc0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <TIM_Base_SetConfig+0xb8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <TIM_Base_SetConfig+0x62>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d007      	beq.n	8003f8a <TIM_Base_SetConfig+0x62>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <TIM_Base_SetConfig+0xbc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d003      	beq.n	8003f8a <TIM_Base_SetConfig+0x62>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <TIM_Base_SetConfig+0xc0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d108      	bne.n	8003f9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <TIM_Base_SetConfig+0xb8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d103      	bne.n	8003fd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	615a      	str	r2, [r3, #20]
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800

08003fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0201 	bic.w	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f023 030a 	bic.w	r3, r3, #10
 8004028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f023 0210 	bic.w	r2, r3, #16
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	031b      	lsls	r3, r3, #12
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004084:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	621a      	str	r2, [r3, #32]
}
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b085      	sub	sp, #20
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f043 0307 	orr.w	r3, r3, #7
 80040c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040da:	b480      	push	{r7}
 80040dc:	b087      	sub	sp, #28
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	021a      	lsls	r2, r3, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	431a      	orrs	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4313      	orrs	r3, r2
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	609a      	str	r2, [r3, #8]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800412c:	2302      	movs	r3, #2
 800412e:	e046      	b.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a16      	ldr	r2, [pc, #88]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00e      	beq.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417c:	d009      	beq.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a12      	ldr	r2, [pc, #72]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d004      	beq.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a10      	ldr	r2, [pc, #64]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10c      	bne.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004198:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40000800 	.word	0x40000800

080041d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <memset>:
 80041f8:	4603      	mov	r3, r0
 80041fa:	4402      	add	r2, r0
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d100      	bne.n	8004202 <memset+0xa>
 8004200:	4770      	bx	lr
 8004202:	f803 1b01 	strb.w	r1, [r3], #1
 8004206:	e7f9      	b.n	80041fc <memset+0x4>

08004208 <__libc_init_array>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	2600      	movs	r6, #0
 800420c:	4d0c      	ldr	r5, [pc, #48]	; (8004240 <__libc_init_array+0x38>)
 800420e:	4c0d      	ldr	r4, [pc, #52]	; (8004244 <__libc_init_array+0x3c>)
 8004210:	1b64      	subs	r4, r4, r5
 8004212:	10a4      	asrs	r4, r4, #2
 8004214:	42a6      	cmp	r6, r4
 8004216:	d109      	bne.n	800422c <__libc_init_array+0x24>
 8004218:	f000 f81a 	bl	8004250 <_init>
 800421c:	2600      	movs	r6, #0
 800421e:	4d0a      	ldr	r5, [pc, #40]	; (8004248 <__libc_init_array+0x40>)
 8004220:	4c0a      	ldr	r4, [pc, #40]	; (800424c <__libc_init_array+0x44>)
 8004222:	1b64      	subs	r4, r4, r5
 8004224:	10a4      	asrs	r4, r4, #2
 8004226:	42a6      	cmp	r6, r4
 8004228:	d105      	bne.n	8004236 <__libc_init_array+0x2e>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004230:	4798      	blx	r3
 8004232:	3601      	adds	r6, #1
 8004234:	e7ee      	b.n	8004214 <__libc_init_array+0xc>
 8004236:	f855 3b04 	ldr.w	r3, [r5], #4
 800423a:	4798      	blx	r3
 800423c:	3601      	adds	r6, #1
 800423e:	e7f2      	b.n	8004226 <__libc_init_array+0x1e>
 8004240:	0800429c 	.word	0x0800429c
 8004244:	0800429c 	.word	0x0800429c
 8004248:	0800429c 	.word	0x0800429c
 800424c:	080042a0 	.word	0x080042a0

08004250 <_init>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr

0800425c <_fini>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr
